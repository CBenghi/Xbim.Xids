// generated via source generation from xbim.xids.generator
using System.Collections.Generic;

namespace Xbim.InformationSpecifications.Helpers
{
	public partial class PropertySetInfo
	{
		static List<PropertySetInfo> GetPropertiesIFC2x3()
		{
			var ret = new List<PropertySetInfo>();
			ret.Add(new PropertySetInfo("Pset_GasTerminalTypeGasBurner", new[] { "GasBurnerType" }, new[] { "IfcGasTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_DuctFittingTypeCommon", new[] { "SubType", "Material", "MaterialThickness", "PressureClass", "UnitWeight", "PressureRange", "TemperatureRange", "NominalDiameterOrWidth", "NominalHeight", "EndStyleTreatment" }, new[] { "IfcDuctFittingType" }));
			ret.Add(new PropertySetInfo("Pset_AirTerminalTypeRound", new[] { "FaceType" }, new[] { "IfcAirTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_FireRatingProperties", new[] { "FireResistanceRating", "IsCombustible", "SurfaceSpreadOfFlame" }, new[] { "IfcSpatialStructureElement", "IfcElement" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeInspectionChamber", new[] { "ChamberLengthOrRadius", "ChamberWidth", "InvertLevel", "SoffitLevel", "WallMaterial", "WallThickness", "BaseMaterial", "BaseThickness", "WithBackdrop", "AccessCoverMaterial", "AccessLengthOrRadius", "AccessWidth", "AccessCoverLoadRating" }, new[] { "IfcDistributionChamberElementType" }));
			ret.Add(new PropertySetInfo("Pset_CooledBeamPHistoryActive", new[] { "AirFlowRate", "Throw", "AirPressureDropCurves" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_CableSegmentTypeCableSegment", new[] { "CrossSectionalArea", "NominalLength", "NominalWidthOrDiameter", "NominalHeight", "NormalOperatingTemperature", "MaxOperatingTemperature", "CableInsulationMaterial", "SheathColor" }, new[] { "IfcCableSegmentType" }));
			ret.Add(new PropertySetInfo("Pset_LightFixtureTypeCommon", new[] { "NumberOfSources", "TotalWattage", "LightFixtureMountingType", "LightFixturePlacingType", "MaintenanceFactor", "ManufacturersSpecificInformation", "ArticleNumber" }, new[] { "IfcLightFixtureType" }));
			ret.Add(new PropertySetInfo("Pset_BeamCommon", new[] { "Reference", "Span", "Slope", "IsExternal", "LoadBearing", "FireRating" }, new[] { "IfcBeam" }));
			ret.Add(new PropertySetInfo("Pset_ElectricMotorTypeCommon", new[] { "MotorEnclosureType", "IsGuarded", "HasPartWinding", "FrameSize", "ElectricMotorEfficiency", "StartCurrentFactor", "LockedRotorCurrent", "MaximumPowerOutput" }, new[] { "IfcElectricMotorType", "IfcFanType", "IfcPumpType" }));
			ret.Add(new PropertySetInfo("Pset_SiteCommon", new[] { "BuildableArea", "TotalArea", "BuildingHeightLimit" }, new[] { "IfcSite" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeGullySump", new[] { "NominalSumpLength", "NominalSumpWidth", "NominalSumpDepth", "SumpMaterial", "GullyType", "TrapType", "OutletConnectionSize", "BackInletPatternType", "InletConnectionSize", "CoverLength", "CoverWidth", "CoverMaterial" }, new[] { "IfcWasteTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeGullyTrap", new[] { "NominalBodyLength", "NominalBodyWidth", "NominalBodyDepth", "BodyMaterial", "GullyType", "HasStrainer", "TrapType", "OutletConnectionSize", "BackInletPatternType", "InletConnectionSize", "CoverLength", "CoverWidth", "CoverMaterial" }, new[] { "IfcWasteTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_ConcreteElementGeneral", new[] { "StructuralClass", "EnvironmentalClass", "FireRating", "ServiceLife", "LifeCycleEnvironmentalLoad", "DimensionalAccuracyClass", "ConstructionToleranceClass", "ConstructionType", "ConcreteCoverAtMainBars", "ConcreteCoverAtLinks" }, new[] { "IfcBeam", "IfcBuildingElementPart", "IfcBuildingElementProxy", "IfcColumn", "IfcCovering", "IfcCurtainWall", "IfcDoor", "IfcFooting", "IfcMember", "IfcPile", "IfcRailing", "IfcRamp", "IfcRampFlight", "IfcRoof", "IfcSlab", "IfcStair", "IfcStairFlight", "IfcWall", "IfcWallStandardCase" }));
			ret.Add(new PropertySetInfo("Pset_UnitaryEquipmentTypeAirConditioningUnit", new[] { "SensibleCoolingCapacity", "LatentCoolingCapacity", "CoolingEfficiency", "HeatingCapacity", "HeatingEfficiency", "CondenserFlowrate", "CondenserEnteringTemperature", "CondenserLeavingTemperature", "OutsideAirFlowrate" }, new[] { "IfcUnitaryEquipmentType" }));
			ret.Add(new PropertySetInfo("Pset_ControllerTypeProportional", new[] { "ControlType", "SignalFactor1", "SignalFactor2", "SignalTime1", "SignalTime2" }, new[] { "IfcControllerType" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeWashHandBasin", new[] { "WashHandBasinType", "WashHandBasinMounting", "NominalLength", "NominalWidth", "NominalDepth", "Material", "Color", "DrainSize" }, new[] { "IfcSanitaryTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcementBarPitchOfColumn", new[] { "Description", "Reference", "ReinforcementBarType", "HoopBarPitch", "XDirectionTieHoopBarPitch", "XDirectionTieHoopCount", "YDirectionTieHoopBarPitch", "YDirectionTieHoopCount" }, new[] { "IfcColumn" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeFlushing", new[] { "FlushingRate", "HasIntegralShutOffDevice", "IsHighPressure" }, new[] { "IfcValveType" }));
			ret.Add(new PropertySetInfo("Pset_EnergyConsumptionPHistoryElectricity", new[] { "Voltage", "RealPower", "ReactivePower", "ApparentPower", "PowerFactor", "Current" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_StairFlightCommon", new[] { "Reference", "NumberOfRiser", "NumberOfTreads", "RiserHeight", "TreadLength", "NosingLength", "WalkingLineOffset", "TreadLengthAtOffset", "TreadLengthAtInnerSide", "Headroom", "WaistThickness" }, new[] { "IfcStairFlight" }));
			ret.Add(new PropertySetInfo("Pset_DoorWindowShadingType", new[] { "ExternalShadingCoefficient", "InternalShadingCoefficient", "InsetShadingCoefficient" }, new[] { "IfcDoor", "IfcWindow" }));
			ret.Add(new PropertySetInfo("Pset_PropertyAgreement", new[] { "AgreementType", "Identifier", "Version", "VersionDate", "PropertyName", "CommencementDate", "TerminationDate", "Duration", "Options", "ConditionCommencement", "Restrictions", "ConditionTermination" }, new[] { "IfcSpatialStructureElement" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcingBarBendingsDIN135610Common", new[] { "DIN135610ShapeCode", "DIN135610ShapeParameter_a", "DIN135610ShapeParameter_b", "DIN135610ShapeParameter_c", "DIN135610ShapeParameter_d", "DIN135610ShapeParameter_e", "DIN135610ShapeParameter_z" }, new[] { "IfcReinforcingBar" }));
			ret.Add(new PropertySetInfo("Pset_ElementShading", new[] { "ShadingDeviceType", "Azimuth", "Inclination", "TiltRange", "AverageSolarTransmittance", "AverageVisibleTransmittance", "Reflectance", "Roughness", "Color" }, new[] { "IfcElement" }));
			ret.Add(new PropertySetInfo("Pset_DamperTypeCommon", new[] { "Operation", "Orientation", "BladeMaterial", "BladeThickness", "SealMaterial", "BladeAction", "BladeShape", "BladeEdge", "NumberofBlades", "FaceArea", "MaximumAirFlowRate", "TemperatureRange", "MaximumWorkingPressure", "TemperatureRating", "TorqueRange", "NominalAirFlowRate", "OpenPressureDrop", "LeakageFullyClosed", "LossCoefficentCurve", "LeakageCurve", "RegeneratedSoundCurve", "FrameType", "FrameDepth", "FrameMaterial", "FrameThickness", "CloseOffRating" }, new[] { "IfcDamperType" }));
			ret.Add(new PropertySetInfo("Pset_FlowControllerDamper", new[] { "SizingMethod" }, new[] { "IfcFlowController" }));
			ret.Add(new PropertySetInfo("Pset_DamperTypeFireSmokeDamper", new[] { "ControlType" }, new[] { "IfcDamperType" }));
			ret.Add(new PropertySetInfo("Pset_ElectricHeaterTypeElectricalPointHeater", new[] { "HeatOutput" }, new[] { "IfcElectricHeaterType" }));
			ret.Add(new PropertySetInfo("Pset_EvaporatorTypeCommon", new[] { "EvaporatorMediumType", "EvaporatorCoolant", "RefrigerantClass", "RefrigerantType", "ExternalSurfaceArea", "InternalSurfaceArea", "InternalRefrigerantVolume", "InternalWaterVolume", "NominalHeatTransferArea", "NominalHeatTransferCoefficient" }, new[] { "IfcEvaporatorType" }));
			ret.Add(new PropertySetInfo("Pset_FlowMovingDeviceFan", new[] { "DischargeType", "ApplicationOfFan", "CoilPosition", "MotorPosition", "FanMountingType", "FractionOfMotorHeatToAirStream", "ImpellerDiameter" }, new[] { "IfcFlowMovingDevice" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeGasSensor", new[] { "GasDetected", "GasSensorSetPoint", "GasSensorRange", "AccuracyOfGasSensor", "TimeConstant" }, new[] { "IfcSensorType" }));
			ret.Add(new PropertySetInfo("Pset_BoilerTypeCommon", new[] { "PressureRating", "OperatingMode", "Material", "HeatTransferSurfaceArea", "NominalPartLoadRatio", "WaterInletTemperatureRange", "WaterStorageCapacity", "IsWaterStorageHeater", "Weight", "PartialLoadEfficiencyCurves", "NominalEfficiency", "HeatOutput", "OutletTemperatureRange", "NominalEnergyConsumption" }, new[] { "IfcBoilerType" }));
			ret.Add(new PropertySetInfo("Pset_FlowSegmentPipeSegment", new[] { "InteriorRoughnessCoefficient", "Length", "Color", "Gradient", "InvertElevation" }, new[] { "IfcFlowSegment" }));
			ret.Add(new PropertySetInfo("Pset_RampCommon", new[] { "Reference", "RequiredHeadroom", "RequiredSlope", "IsExternal", "FireRating", "FireExit", "HandicapAccessible", "HasNonSkidSurface" }, new[] { "IfcRamp" }));
			ret.Add(new PropertySetInfo("Pset_SpaceThermalRequirements", new[] { "SpaceTemperatureMax", "SpaceTemperatureMin", "SpaceTemperatureSummerMax", "SpaceTemperatureSummerMin", "SpaceTemperatureWinterMax", "SpaceTemperatureWinterMin", "SpaceHumidity", "SpaceHumiditySummer", "SpaceHumidityWinter", "DiscontinuedHeating", "NaturalVentilation", "NaturalVentilationRate", "MechanicalVentilationRate", "AirConditioning", "AirConditioningCentral" }, new[] { "IfcSpace", "IfcZone" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryWireLoop", new[] { "WireLoopBasePlateThickness", "WireLoopBasePlateWidth", "WireLoopBasePlateLength", "WireDiameter", "WireEmbeddingLength", "WireLoopLength" }, new[] { "IfcDiscreteAccessory", "IfcDiscreteAccessoryType" }));
			ret.Add(new PropertySetInfo("Pset_CompressorPHistory", new[] { "CompressorCapacity", "EnergyEfficiencyRatio", "CoefficientOfPerformance", "VolumetricEfficiency", "CompressionEfficiency", "MechanicalEfficiency", "IsentropicEfficiency", "CompressorTotalEfficiency", "ShaftPower", "InputPower", "LubricantPumpHeatGain", "FrictionHeatGain", "CompressorTotalHeatGain", "FullLoadRatioCurve" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_FireSuppressionTerminalTypeBreechingInlet", new[] { "BreechingInletType", "InletDiameter", "OutletDiameter", "CouplingType", "HasCaps", "Material" }, new[] { "IfcFireSuppressionTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcementBarCountOfIndependentFooting", new[] { "Description", "Reference", "XDirectionLowerBarCount", "YDirectionLowerBarCount", "XDirectionUpperBarCount", "YDirectionUpperBarCount" }, new[] { "IfcFooting" }));
			ret.Add(new PropertySetInfo("Pset_PlateCommon", new[] { "Reference", "IsExternal", "LoadBearing", "AcousticRating", "FireRating", "ThermalTransmittance" }, new[] { "IfcPlate" }));
			ret.Add(new PropertySetInfo("Pset_FireSuppressionTerminalTypeSprinkler", new[] { "SprinklerType", "Activation", "Response", "ActivationTemperature", "CoverageArea", "HasDeflector", "BulbLiquidColor", "DischargeFlowRate", "ResidualFlowingPressure", "DischargeCoefficient", "MaximumWorkingPressure", "ConnectionSize", "FrameMaterial", "DeflectorMaterial" }, new[] { "IfcFireSuppressionTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_SpaceCommon", new[] { "Reference", "Category", "FloorCovering", "WallCovering", "CeilingCovering", "SkirtingBoard", "GrossPlannedArea", "NetPlannedArea", "PubliclyAccessible", "HandicapAccessible", "ConcealedFlooring", "ConcealedCeiling" }, new[] { "IfcSpace" }));
			ret.Add(new PropertySetInfo("Pset_FlowMeterTypeEnergyMeter", new[] { "ConnectionSize" }, new[] { "IfcFlowMeterType" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeWCSeat", new[] { "SeatType", "SeatHasCover", "SeatMaterial", "SeatColor" }, new[] { "IfcSanitaryTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeToggleSwitch", new[] { "ToggleSwitchType", "SwitchUsage", "SwitchActivation", "IsIlluminated", "Legend" }, new[] { "IfcSwitchingDeviceType" }));
			ret.Add(new PropertySetInfo("Pset_BoilerTypeSteam", new[] { "MaximumOutletPressure" }, new[] { "IfcBoilerType" }));
			ret.Add(new PropertySetInfo("Pset_BinaryInput", new[] { "Polarity", "InactiveText", "ActiveText", "MinimumOffTime", "MinimumOnTime", "FeedbackValue", "EventEnable", "AckedTransitions" }, new[] { "IfcDistributionControlElement" }));
			ret.Add(new PropertySetInfo("Pset_CoveringCeiling", new[] { "FragilityRating", "Permeability", "TileLength", "TileWidth" }, new[] { "IfcCovering" }));
			ret.Add(new PropertySetInfo("Pset_ZoneCommon", new[] { "Reference", "Category", "GrossAreaPlanned", "NetAreaPlanned", "PubliclyAccessible", "HandicapAccessible" }, new[] { "IfcZone" }));
			ret.Add(new PropertySetInfo("Pset_SlabCommon", new[] { "Reference", "AcousticRating", "FireRating", "Combustible", "SurfaceSpreadOfFlame", "ThermalTransmittance", "IsExternal", "LoadBearing", "Compartmentation", "PitchAngle" }, new[] { "IfcSlab" }));
			ret.Add(new PropertySetInfo("Pset_FlowInstrumentTypeThermometer", new[] { "ThermometerType", "DisplaySize" }, new[] { "IfcFlowInstrumentType" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeFireSensor", new[] { "FireSensorSetPoint", "AccuracyOfFireSensor", "TimeConstant" }, new[] { "IfcSensorType" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeOilInterceptor", new[] { "BodyMaterial", "NominalBodyLength", "NominalBodyWidth", "NominalBodyDepth", "InletConnectionSize", "OutletConnectionSize", "CoverLength", "CoverWidth", "CoverMaterial" }, new[] { "IfcWasteTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_OutletTypeCommon", new[] { "IsPluggableOutlet" }, new[] { "IfcOutletType" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeHumiditySensor", new[] { "HumiditySetPoint", "HumiditySensorRange", "AccuracyOfHumiditySensor", "TimeConstant" }, new[] { "IfcSensorType" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeShower", new[] { "ShowerType", "HasTray", "NominalLength", "NominalWidth", "NominalDepth", "Material", "MaterialThickness", "Color", "ShowerHeadDescription", "DrainSize" }, new[] { "IfcSanitaryTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_ControllerTypeTwoPosition", new[] { "ControlType", "BandWidth" }, new[] { "IfcControllerType" }));
			ret.Add(new PropertySetInfo("Pset_DuctDesignCriteria", new[] { "DesignName", "DuctSizingMethod", "PressureClass", "LeakageClass", "FrictionLoss", "ScrapFactor", "DuctSealant", "MaximumVelocity", "AspectRatio", "MinimumHeight", "MinimumWidth" }, new[] { "IfcSystem" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeUrinal", new[] { "UrinalType", "UrinalMaterial", "UrinalColor", "SpilloverLevel", "NominalLength", "NominalWidth", "NominalDepth" }, new[] { "IfcSanitaryTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_ActorCommon", new[] { "NumberOfActors", "Category", "SkillLevel" }, new[] { "IfcActor" }));
			ret.Add(new PropertySetInfo("Pset_AnalogOutput", new[] { "HighLimit", "LowLimit", "Deadband", "HighLimitEnable", "LowLimitEnable", "EventEnable", "NotifyType" }, new[] { "IfcDistributionControlElement" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypePressureSensor", new[] { "PressureSensorSetPoint", "PressureSensorRange", "AccuracyOfPressureSensor", "TimeConstant", "IsSwitch" }, new[] { "IfcSensorType" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeSmokeSensor", new[] { "CoverageArea", "PressureSensorSetPoint", "SmokeSensorRange", "AccuracyOfSmokeSensor", "TimeConstant", "HasBuiltInAlarm" }, new[] { "IfcSensorType" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeMovementSensor", new[] { "MovementSensingType", "TimeConstant" }, new[] { "IfcSensorType" }));
			ret.Add(new PropertySetInfo("Pset_DrainageCulvert", new[] { "InternalWidth", "ClearDepth" }, new[] { "IfcSystem" }));
			ret.Add(new PropertySetInfo("Pset_RailingCommon", new[] { "Reference", "Height", "Diameter", "IsExternal" }, new[] { "IfcRailing" }));
			ret.Add(new PropertySetInfo("Pset_UnitaryEquipmentTypeAirHandler", new[] { "AirHandlerConstruction", "AirHandlerFanCoilArrangement", "DualDeck" }, new[] { "IfcUnitaryEquipmentType" }));
			ret.Add(new PropertySetInfo("Pset_CableCarrierSegmentTypeConduitSegment", new[] { "NominalLength", "NominalWidth", "NominalHeight", "ConduitShapeType", "IsRigid" }, new[] { "IfcCableCarrierSegmentType" }));
			ret.Add(new PropertySetInfo("Pset_AnalogInput", new[] { "HighLimit", "LowLimit", "Deadband", "HighLimitEnable", "LowLimitEnable", "EventEnable", "NotifyType" }, new[] { "IfcDistributionControlElement" }));
			ret.Add(new PropertySetInfo("Pset_SpaceFireSafetyRequirements", new[] { "MainFireUse", "AncillaryFireUse", "FireRiskFactor", "FireHazardFactor", "FlammableStorage", "FireExit", "SprinklerProtection", "SprinklerProtectionAutomatic", "AirPressurization" }, new[] { "IfcSpace", "IfcZone" }));
			ret.Add(new PropertySetInfo("Pset_ManufacturerTypeInformation", new[] { "ArticleNumber", "ModelReference", "ModelLabel", "Manufacturer", "ProductionYear" }, new[] { "IfcElement" }));
			ret.Add(new PropertySetInfo("Pset_FireSuppressionTerminalTypeFireHydrant", new[] { "FireHydrantType", "PumperConnectionSize", "NumberOfHoseConnections", "HoseConnectionSize", "DischargeFlowRate", "FlowClass", "WaterIsPotable", "PressureRating", "BodyColor", "CapColor" }, new[] { "IfcFireSuppressionTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_SystemFurnitureElementTypePanel", new[] { "HasOpening", "FurniturePanelType", "NominalThickness" }, new[] { "IfcSystemFurnitureElementType" }));
			ret.Add(new PropertySetInfo("Pset_VibrationIsolatorTypeCommon", new[] { "VibrationTransmissibility", "IsolatorStaticDeflection", "IsolatorCompressibility", "Height", "Material", "MaximumSupportedWeight" }, new[] { "IfcVibrationIsolatorType" }));
			ret.Add(new PropertySetInfo("Pset_CompressorTypeCommon", new[] { "PowerSource", "RefrigerantClass", "RefrigerantType", "MinimumPartLoadRatio", "MaximumPartLoadRatio", "CompressorSpeed", "NominalCapacity", "IdealCapacity", "IdealShaftPower", "HasHotGasBypass" }, new[] { "IfcCompressorType" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcementBarPitchOfBeam", new[] { "Description", "Reference", "StirrupBarPitch", "SpacingBarPitch" }, new[] { "IfcBeam" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcementBarPitchOfSlab", new[] { "Description", "Reference", "LongOutsideTopBarPitch", "LongInsideCenterTopBarPitch", "LongInsideEndTopBarPitch", "ShortOutsideTopBarPitch", "ShortInsideCenterTopBarPitch", "ShortInsideEndTopBarPitch", "LongOutsideLowerBarPitch", "LongInsideCenterLowerBarPitch", "LongInsideEndLowerBarPitch", "ShortOutsideLowerBarPitch", "ShortInsideCenterLowerBarPitch", "ShortInsideEndLowerBarPitch" }, new[] { "IfcSlab" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcementBarPitchOfWall", new[] { "Description", "Reference", "BarAllocationType", "VerticalBarPitch", "HorizontalBarPitch", "SpacingBarPitch" }, new[] { "IfcWall" }));
			ret.Add(new PropertySetInfo("Pset_FurnitureTypeCommon", new[] { "Description", "Style", "NominalHeight", "NominalLength", "NominalDepth", "MainColor" }, new[] { "IfcFurnitureType" }));
			ret.Add(new PropertySetInfo("Pset_ElectricGeneratorTypeCommon", new[] { "ElectricGeneratorEfficiency", "StartCurrentFactor", "MaximumPowerOutput" }, new[] { "IfcElectricGeneratorType" }));
			ret.Add(new PropertySetInfo("Pset_MemberCommon", new[] { "Reference", "Span", "Slope", "IsExternal", "LoadBearing", "FireRating" }, new[] { "IfcMember" }));
			ret.Add(new PropertySetInfo("Pset_BuildingUseAdjacent", new[] { "MarketCategory", "MarketSubCategory", "PlanningControlStatus", "NarrativeText" }, new[] { "IfcBuilding" }));
			ret.Add(new PropertySetInfo("Pset_EvaporativeCoolerTypeCommon", new[] { "FlowArrangement", "HeatExchangeArea", "HeatExchangerMediaMaterials", "OperationTemperatureRange", "Weight", "WaterRequirement" }, new[] { "IfcEvaporativeCoolerType" }));
			ret.Add(new PropertySetInfo("Pset_TransformerTypeCommon", new[] { "PrimaryVoltage", "SecondaryVoltage", "PrimaryCurrent", "SecondaryCurrent", "PrimaryFrequency", "SecondaryFrequency", "PrimaryApparentPower", "SecondaryApparentPower", "MaximumApparentPower", "SecondaryCurrentType" }, new[] { "IfcTransformerType" }));
			ret.Add(new PropertySetInfo("Pset_UtilityConsumption", new[] { "Heat", "Electricity", "Water", "Fuel", "Steam" }, new[] { "IfcBuilding" }));
			ret.Add(new PropertySetInfo("Pset_ThermalLoadAggregate", new[] { "TotalCoolingLoad", "TotalHeatingLoad", "LightingDiversity", "InfiltrationDiversitySummer", "InfiltrationDiversityWinter", "ApplianceDiversity", "LoadSafetyFactor" }, new[] { "IfcZone", "IfcSpatialStructureElement", "IfcSystem" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeCistern", new[] { "CisternHeight", "CisternCapacity", "IsSingleFlush", "FlushType", "FlushRate", "IsAutomaticFlush", "CisternMaterial", "CisternColor" }, new[] { "IfcSanitaryTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_ColumnCommon", new[] { "Reference", "Slope", "IsExternal", "LoadBearing", "FireRating" }, new[] { "IfcColumn" }));
			ret.Add(new PropertySetInfo("Pset_FlowTerminalAirTerminal", new[] { "AirflowType", "Location" }, new[] { "IfcFlowTerminal" }));
			ret.Add(new PropertySetInfo("Pset_ProjectionElementShadingDevicePHistory", new[] { "TiltAngle", "Azimuth" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_DamperPHistory", new[] { "AirFlowRate", "Leakage", "PressureDrop", "BladePositionAngle", "DamperPosition", "PressureLossCoefficient" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeRoofDrain", new[] { "NominalBodyLength", "NominalBodyWidth", "NominalBodyDepth", "BodyMaterial", "OutletConnectionSize", "CoverLength", "CoverWidth", "CoverMaterial" }, new[] { "IfcWasteTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_Warranty", new[] { "WarrantyIdentifier", "WarrantyStartDate", "WarrantyEndDate", "IsExtendedWarranty", "WarrantyPeriod", "PointOfContact", "WarrantyContent", "Exclusions" }, new[] { "IfcProduct", "IfcSystem" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryAnchorBolt", new[] { "AnchorBoltLength", "AnchorBoltDiameter", "AnchorBoltThreadLength", "AnchorBoltProtrusionLength" }, new[] { "IfcDiscreteAccessory", "IfcDiscreteAccessoryType" }));
			ret.Add(new PropertySetInfo("Pset_GasTerminalTypeCommon", new[] { "GasFlowRateRange" }, new[] { "IfcGasTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeLightSensor", new[] { "LightSensorSetPoint", "LightSensorRange", "LightSensorAccuracy", "TimeConstant" }, new[] { "IfcSensorType" }));
			ret.Add(new PropertySetInfo("Pset_FilterPHistory", new[] { "CountedEfficiency", "WeightedEfficiency", "ParticleMassHolding" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_GasTerminalPHistory", new[] { "GasFlowRate" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_ActuatorTypeElectricActuator", new[] { "ActuatorInputPower", "ElectricActuatorType" }, new[] { "IfcActuatorType" }));
			ret.Add(new PropertySetInfo("Pset_AirToAirHeatRecoveryTypeCommon", new[] { "HeatTransferTypeEnum", "MediaMaterial", "HasDefrost", "OperationalTemperatureRange", "PrimaryAirflowRateRange", "SecondaryAirflowRateRange", "Weight" }, new[] { "IfcAirToAirHeatRecoveryType" }));
			ret.Add(new PropertySetInfo("Pset_DuctSilencerPHistory", new[] { "AirFlowRate", "AirPressureDropCurve" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_CurtainWallCommon", new[] { "Reference", "AcousticRating", "FireRating", "Combustible", "SurfaceSpreadOfFlame", "ThermalTransmittance", "IsExternal" }, new[] { "IfcCurtainWall" }));
			ret.Add(new PropertySetInfo("Pset_EnergyConversionDeviceSpaceHeaterSectional", new[] { "NumberOfSections" }, new[] { "IfcEnergyConversionDevice" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcementBarPitchOfContinuousFooting", new[] { "Description", "Reference", "CrossingUpperBarPitch", "CrossingLowerBarPitch" }, new[] { "IfcFooting" }));
			ret.Add(new PropertySetInfo("Pset_TankTypePreformed", new[] { "PatternType", "EndShapeType", "FirstCurvatureRadius", "SecondCurvatureRadius" }, new[] { "IfcTankType" }));
			ret.Add(new PropertySetInfo("Pset_PipeSegmentPHistory", new[] { "LeakageCurve", "FluidFlowLeakage" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypePressureReducing", new[] { "UpstreamPressure", "DownstreamPressure" }, new[] { "IfcValveType" }));
			ret.Add(new PropertySetInfo("Pset_PumpPHistory", new[] { "MechanicalEfficiency", "OverallEfficiency", "PressureRise", "RotationSpeed", "Flowrate", "Power" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeWasteTrap", new[] { "WasteTrapType", "OutletConnectionSize", "InletConnectionSize" }, new[] { "IfcWasteTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_FilterTypeCommon", new[] { "MediaMaterial", "Weight", "InitialResistance", "FinalResistance", "OperationTemperatureRange", "FlowRateRange", "NominalFilterFaceVelocity", "NominalMediaSurfaceVelocity", "NominalPressureDrop", "NominalFlowrate", "NominalParticleGeometricMeanDiameter", "NominalParticleGeometricStandardDeviation" }, new[] { "IfcFilterType" }));
			ret.Add(new PropertySetInfo("Pset_ProjectOrderWorkOrder", new[] { "ProductDescription", "ShortJobDescription", "LongJobDescription", "WorkTypeRequested", "ContractualType", "IfNotAccomplished" }, new[] { "IfcProjectOrder" }));
			ret.Add(new PropertySetInfo("Pset_LampTypeCommon", new[] { "ContributedLuminousFlux", "LightEmitterNominalPower", "LampMaintenanceFactor", "LampBallastType", "LampCompensationType", "ColorAppearance", "Spectrum", "ColorTemperature", "ColorRenderingIndex" }, new[] { "IfcLampType" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeInspectionPit", new[] { "Length", "Width", "Depth" }, new[] { "IfcDistributionChamberElementType" }));
			ret.Add(new PropertySetInfo("Pset_CoveringFlooring", new[] { "HasNonSkidSurface", "HasAntiStaticSurface" }, new[] { "IfcCovering" }));
			ret.Add(new PropertySetInfo("Pset_CondenserTypeCommon", new[] { "RefrigerantClass", "RefrigerantType", "ExternalSurfaceArea", "InternalSurfaceArea", "InternalRefrigerantVolume", "InternalWaterVolume", "NominalHeatTransferArea", "NominalHeatTransferCoefficient" }, new[] { "IfcCondenserType" }));
			ret.Add(new PropertySetInfo("Pset_ProjectOrderChangeOrder", new[] { "ChangeDescription", "ReasonForChange", "BudgetSource" }, new[] { "IfcProjectOrder" }));
			ret.Add(new PropertySetInfo("Pset_TubeBundleTypeCommon", new[] { "NumberOfRows", "StaggeredRowSpacing", "InLineRowSpacing", "NumberOfCircuits", "FoulingFactor", "ThermalConductivity", "Length", "Volume", "NominalDiameter", "OutsideDiameter", "InsideDiameter", "HorizontalSpacing", "VerticalSpacing", "Material", "HasTurbulator" }, new[] { "IfcTubeBundleType" }));
			ret.Add(new PropertySetInfo("Pset_CoveringCommon", new[] { "Reference", "FireRating", "AcousticRating", "FlammabilityRating", "FragilityRating", "SurfaceSpreadOfFlame", "Material", "Combustible", "TotalThickness", "Finish" }, new[] { "IfcCovering", "IfcCoveringType" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeTrench", new[] { "Width", "Depth", "InvertLevel" }, new[] { "IfcDistributionChamberElementType" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeCO2Sensor", new[] { "CoverageArea", "WashHandBasinSetPoint", "CO2SensorRange", "AccuracyOfCO2Sensor", "TimeConstant" }, new[] { "IfcSensorType" }));
			ret.Add(new PropertySetInfo("Pset_FlowInstrumentTypePressureGauge", new[] { "PressureGaugeType", "DisplaySize" }, new[] { "IfcFlowInstrumentType" }));
			ret.Add(new PropertySetInfo("Pset_FlowMeterTypeWaterMeter", new[] { "Type", "ConnectionSize", "MaximumFlowRate", "MaximumPressureLoss", "BackflowPreventerType" }, new[] { "IfcFlowMeterType" }));
			ret.Add(new PropertySetInfo("Pset_GasTerminalTypeGasAppliance", new[] { "GasApplianceType", "FlueType" }, new[] { "IfcGasTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_TransportElementCommon", new[] { "Reference", "FireExit" }, new[] { "IfcTransportElement" }));
			ret.Add(new PropertySetInfo("Pset_TubeBundleTypeFinned", new[] { "Spacing", "Thickness", "ThermalConductivity", "Length", "Height", "Diameter", "Material", "FinCorrugatedType", "HasCoating" }, new[] { "IfcTubeBundleType" }));
			ret.Add(new PropertySetInfo("Pset_ChillerTypeCommon", new[] { "NominalCapacity", "NominalEfficiency", "NominalCondensingTemperature", "NominalEvaporatingTemperature", "NominalHeatRejectionRate", "NominalPowerConsumption" }, new[] { "IfcChillerType" }));
			ret.Add(new PropertySetInfo("Pset_BinaryOutput", new[] { "Polarity", "InactiveText", "ActiveText", "AlarmValue", "EventEnable", "AckedTransitions" }, new[] { "IfcDistributionControlElement" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeSoundSensor", new[] { "SoundSensorSetPoint", "SoundSensorRange", "SoundSensorAccuracy", "TimeConstant" }, new[] { "IfcSensorType" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryFixingSocket", new[] { "FixingSocketTypeReference", "FixingSocketHeight", "FixingSocketThreadDiameter", "FixingSocketThreadLength" }, new[] { "IfcDiscreteAccessory", "IfcDiscreteAccessoryType" }));
			ret.Add(new PropertySetInfo("Pset_CableCarrierSegmentTypeCableLadderSegment", new[] { "NominalLength", "NominalWidth", "NominalHeight", "LadderConfiguration" }, new[] { "IfcCableCarrierSegmentType" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeResidualCurrentSwitch", new[] { "Sensitivity" }, new[] { "IfcProtectiveDeviceType" }));
			ret.Add(new PropertySetInfo("Pset_EvaporatorPHistory", new[] { "HeatRejectionRate", "ExteriorHeatTransferCoefficient", "InteriorHeatTransferCoefficient", "RefrigrerantFoulingResistance", "EvaporatingTemperature", "LogarithmicMeanTemperatureDifference", "UAcurves", "CompressorEvaporatorHeatGain", "CompressorEvaporatorPressureDrop", "EvaporatorMeanVoidFraction", "WaterFoulingResistance" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_DamperTypeControlDamper", new[] { "TorqueRange", "ControlDamperOperation" }, new[] { "IfcDamperType" }));
			ret.Add(new PropertySetInfo("Pset_CondenserPHistory", new[] { "HeatRejectionRate", "ExteriorHeatTransferCoefficient", "InteriorHeatTransferCoefficient", "RefrigerantFoulingResistance", "CondensingTemperature", "LogarithmicMeanTemperatureDifference", "UAcurves", "CompressorCondenserHeatGain", "CompressorCondenserPressureDrop", "CondenserMeanVoidFraction", "WaterFoulingResistance" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_WallCommon", new[] { "Reference", "AcousticRating", "FireRating", "Combustible", "SurfaceSpreadOfFlame", "ThermalTransmittance", "IsExternal", "ExtendToStructure", "LoadBearing", "Compartmentation" }, new[] { "IfcWall", "IfcWallStandardCase" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeAirRelease", new[] { "IsAutomatic" }, new[] { "IfcValveType" }));
			ret.Add(new PropertySetInfo("Pset_AirTerminalTypeCommon", new[] { "Shape", "FlowPattern", "AirFlowrateRange", "TemperatureRange", "DischargeDirection", "ThrowLength", "AirDiffusionPerformanceIndex", "Material", "FinishType", "FinishColor", "MountingType", "CoreType", "CoreSetHorizontal", "CoreSetVertical", "HasIntegralControl", "FlowControlType", "HasSoundAttenuator", "HasThermalInsulation", "NeckArea", "EffectiveArea", "Weight", "AirFlowrateVersusFlowControlElement" }, new[] { "IfcAirTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_BuildingStoreyCommon", new[] { "EntranceLevel", "AboveGround", "SprinklerProtection", "SprinklerProtectionAutomatic", "GrossAreaPlanned", "NetAreaPlanned" }, new[] { "IfcBuildingStorey" }));
			ret.Add(new PropertySetInfo("Pset_BuildingElementProxyCommon", new[] { "Reference" }, new[] { "IfcBuildingElementProxy" }));
			ret.Add(new PropertySetInfo("Pset_ProjectOrderMoveOrder", new[] { "MoveDescription", "SpecialInstructions" }, new[] { "IfcProjectOrder" }));
			ret.Add(new PropertySetInfo("Pset_SpaceParkingAisle", new[] { "IsOneWay" }, new[] { "IfcSpace" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeTemperatureSensor", new[] { "TemperatureSensorType", "TemperatureSensorSetPoint", "TemperatureSensorRange", "AccuracyOfTemperatureSensor", "TimeConstant" }, new[] { "IfcSensorType" }));
			ret.Add(new PropertySetInfo("Pset_WindowCommon", new[] { "Reference", "FireRating", "AcousticRating", "SecurityRating", "IsExternal", "Infiltration", "ThermalTransmittance", "GlazingAreaFraction", "SmokeStop" }, new[] { "IfcWindow" }));
			ret.Add(new PropertySetInfo("Pset_PumpTypeCommon", new[] { "FlowRateRange", "FlowResistanceRange", "ConnectionSize", "CasingMaterial", "ImpellerMaterial", "ImpellerSealMaterial", "TemperatureRange", "NetPositiveSuctionHead", "NominalRotationSpeed" }, new[] { "IfcPumpType" }));
			ret.Add(new PropertySetInfo("Pset_SystemFurnitureElementTypeWorkSurface", new[] { "UsePurpose", "SupportType", "HangingHeight", "NominalThickness", "ShapeDescription" }, new[] { "IfcSystemFurnitureElementType" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryDiagonalTrussConnector", new[] { "DiagonalTrussHeight", "DiagonalTrussLength", "DiagonalTrussCrossBarSpacing", "DiagonalTrussBaseBarDiameter", "DiagonalTrussSecondaryBarDiameter", "DiagonalTrussCrossBarDiameter" }, new[] { "IfcDiscreteAccessory", "IfcDiscreteAccessoryType" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeIsolating", new[] { "IsNormallyOpen", "IsolatingPurpose" }, new[] { "IfcValveType" }));
			ret.Add(new PropertySetInfo("Pset_TankTypePressureVessel", new[] { "ChargePressure", "PressureRegulatorSetting", "ReliefValveSetting" }, new[] { "IfcTankType" }));
			ret.Add(new PropertySetInfo("Pset_SpaceThermalDesign", new[] { "CoolingDesignAirflow", "HeatingDesignAirflow", "TotalSensibleHeatGain", "TotalHeatGain", "TotalHeatLoss", "CoolingDryBulb", "CoolingRelativeHumidity", "HeatingDryBulb", "HeatingRelativeHumidity", "VentilationAirFlowrate", "ExhaustAirFlowrate", "CeilingRAPlenum", "BoundaryAreaHeatLoss" }, new[] { "IfcSpace" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeHeatSensor", new[] { "CoverageArea", "HeatSensorSetPoint", "HeatSensorRange", "HeatSensorAccuracy", "TimeConstant" }, new[] { "IfcSensorType" }));
			ret.Add(new PropertySetInfo("Pset_AirTerminalBoxPHistory", new[] { "DamperPosition", "AtmosphericPressure", "Sound", "AirflowCurve" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_CableSegmentTypeConductorSegment", new[] { "CrossSectionalArea", "NominalLength", "ElectricalConductorFunction", "PhaseReference", "ConductorMaterial", "ConductorSheathMaterial", "MaximumOperatingTemperature", "IsFireResistant", "SheathColor" }, new[] { "IfcCableSegmentType" }));
			ret.Add(new PropertySetInfo("Pset_CoilTypeHydronic", new[] { "FluidPressureRange", "CoilCoolant", "CoilConnectionDirection", "CoilFluidArrangement", "CoilFaceArea", "HeatExchangeSurfaceArea", "PrimarySurfaceArea", "SecondarySurfaceArea", "Fluid", "TotalUACurves", "WaterPressureDropCurve", "BypassFactor", "SensibleHeatRatio", "WetCoilFraction" }, new[] { "IfcCoilType" }));
			ret.Add(new PropertySetInfo("Pset_DesignPoint", new[] { "IsDesignPoint" }, new[] { "IfcDistributionPort" }));
			ret.Add(new PropertySetInfo("Pset_FlowMeterTypeCommon", new[] { "ReadOutType", "RemoteReading", "IsMain" }, new[] { "IfcFlowMeterType" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeWasteDisposalUnit", new[] { "DrainConnectionSize", "OutletConnectionSize", "NominalDepth" }, new[] { "IfcWasteTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeCircuitBreaker", new[] { "CircuitBreakerType" }, new[] { "IfcProtectiveDeviceType" }));
			ret.Add(new PropertySetInfo("Pset_DuctFittingPHistory", new[] { "LossCoefficient", "AtmosphericPressure", "AirFlowLeakage" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_DuctSilencerTypeCommon", new[] { "Shape", "HydraulicDiameter", "Length", "Weight", "AirFlowrateRange", "WorkingPressureRange", "TemperatureRange", "HasExteriorInsulation" }, new[] { "IfcDuctSilencerType" }));
			ret.Add(new PropertySetInfo("Pset_ControllerTypeCommon", new[] { "ControlType", "SignalOffset", "SignalFactor", "SignalTime" }, new[] { "IfcControllerType" }));
			ret.Add(new PropertySetInfo("Pset_ActuatorTypeHydraulicActuator", new[] { "InputPressure", "InputFlowrate" }, new[] { "IfcActuatorType" }));
			ret.Add(new PropertySetInfo("Pset_ProjectOrderPurchaseOrder", new[] { "IsFOB", "ShipMethod" }, new[] { "IfcProjectOrder" }));
			ret.Add(new PropertySetInfo("Pset_FlowMeterTypeOilMeter", new[] { "ConnectionSize", "MaximumFlowRate" }, new[] { "IfcFlowMeterType" }));
			ret.Add(new PropertySetInfo("Pset_SystemFurnitureElementTypeCommon", new[] { "IsUsed", "GroupCode", "NominalWidth", "NominalHeight", "Finishing" }, new[] { "IfcSystemFurnitureElementType" }));
			ret.Add(new PropertySetInfo("Pset_DuctSegmentTypeCommon", new[] { "Shape", "Material", "MaterialThickness", "WorkingPressure", "UnitWeight", "PressureRange", "TemperatureRange", "LongitudinalSeam", "Length", "NominalDiameterOrWidth", "NominalHeight", "EndStyleTreatment", "Reinforcement", "ReinforcementSpacing" }, new[] { "IfcDuctSegmentType" }));
			ret.Add(new PropertySetInfo("Pset_DrainageReserve", new[] { "Width" }, new[] { "IfcSite" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeMeterChamber", new[] { "ChamberLengthOrRadius", "ChamberWidth", "WallMaterial", "WallThickness", "BaseMaterial", "BaseThickness", "AccessCoverMaterial" }, new[] { "IfcDistributionChamberElementType" }));
			ret.Add(new PropertySetInfo("Pset_TankTypeCommon", new[] { "Type", "AccessType", "NominalLengthOrDiameter", "NominalWidthOrDiameter", "NominalDepth", "NominalCapacity", "EffectiveCapacity", "OperatingWeight", "Material", "MaterialThickness" }, new[] { "IfcTankType" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryEdgeFixingPlate", new[] { "EdgeFixingPlateLength", "EdgeFixingPlateThickness", "EdgeFixingPlateFlangeWidthInPlaneZ", "EdgeFixingPlateFlangeWidthInPlaneX" }, new[] { "IfcDiscreteAccessory", "IfcDiscreteAccessoryType" }));
			ret.Add(new PropertySetInfo("Pset_AirTerminalTypeSquare", new[] { "FaceType" }, new[] { "IfcAirTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeEarthFailureDevice", new[] { "EarthFailureDeviceType", "Sensitivity" }, new[] { "IfcProtectiveDeviceType" }));
			ret.Add(new PropertySetInfo("Pset_ElectricalCircuit", new[] { "Diversity", "NumberOfPhases", "MaximumAllowedVoltageDrop", "NetImpedance" }, new[] { "IfcElectricalCircuit" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeResidualCurrentCircuitBreaker", new[] { "Sensitivity" }, new[] { "IfcProtectiveDeviceType" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeFloorWaste", new[] { "NominalBodyLength", "NominalBodyWidth", "NominalBodyDepth", "BodyMaterial", "OutletConnectionSize", "CoverLength", "CoverWidth", "CoverMaterial" }, new[] { "IfcWasteTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_FireSuppressionTerminalTypeHoseReel", new[] { "HoseReelType", "HoseReelMountingType", "InletConnectionSize", "HoseDiameter", "HoseLength", "HoseNozzleType", "ClassOfService", "ClassificationAuthority" }, new[] { "IfcFireSuppressionTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeContactor", new[] { "ContactorType" }, new[] { "IfcSwitchingDeviceType" }));
			ret.Add(new PropertySetInfo("Pset_DoorWindowGlazingType", new[] { "GlassLayers", "GlassThickness1", "GlassThickness2", "GlassThickness3", "FillGas", "GlassColor", "IsTempered", "IsLaminated", "IsCoated", "IsWired", "Translucency", "Reflectivity", "BeamRadiationTransmittance", "SolarHeatGainTransmittance", "ThermalTransmittanceSummer", "ThermalTransmittanceWinter" }, new[] { "IfcDoor", "IfcWindow" }));
			ret.Add(new PropertySetInfo("Pset_ActuatorTypeCommon", new[] { "FailPosition", "ManualOverride" }, new[] { "IfcActuatorType" }));
			ret.Add(new PropertySetInfo("Pset_SpaceThermalPHistory", new[] { "CoolingAirFlowRate", "HeatingAirFlowRate", "VentilationAirFlowRate", "ExhaustAirFlowRate", "SpaceTemperature", "SpaceRelativeHumidity" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_EnergyConsumptionPHistorySteam", new[] { "Temperature", "Pressure", "Flowrate", "Quality" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_AirTerminalTypeSlot", new[] { "SlotWidth", "SlotLength", "NumberOfSlots" }, new[] { "IfcAirTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_ProductRequirements", new[] { "Name", "Category", "GroupName", "Classification", "DemandValue", "DemandThresholdValue", "DemandImportanceValue", "SupplyEvaluationValue", "GapValue", "GapValueWeighted" }, new[] { "IfcProduct" }));
			ret.Add(new PropertySetInfo("Pset_PrecastConcreteElementGeneral", new[] { "TypeDesignator", "ProductionLotId", "SerialNumber", "ElementWeight", "ElementGrossVolume", "ElementNetVolume", "CornerChamfer", "ManufacturingToleranceClass", "FormStrippingStrength", "LiftingStrength", "ReleaseStrength", "MinimumAllowableSupportLength", "InitialTension", "TendonRelaxation", "TransportationStrength", "SupportDuringTransportDescription", "SupportDuringTransportDocReference", "HollowCorePlugging" }, new[] { "IfcBeam", "IfcBuildingElementPart", "IfcBuildingElementProxy", "IfcColumn", "IfcCovering", "IfcCurtainWall", "IfcDoor", "IfcFooting", "IfcMember", "IfcPile", "IfcRailing", "IfcRamp", "IfcRampFlight", "IfcRoof", "IfcSlab", "IfcStair", "IfcStairFlight", "IfcWall", "IfcWallStandardCase" }));
			ret.Add(new PropertySetInfo("Pset_BuildingCommon", new[] { "BuildingID", "IsPermanentID", "MainFireUse", "AncillaryFireUse", "SprinklerProtection", "SprinklerProtectionAutomatic", "OccupancyType", "GrossPlannedArea", "NumberOfStoreys", "YearOfConstruction", "IsLandmarked" }, new[] { "IfcBuilding" }));
			ret.Add(new PropertySetInfo("Pset_FlowControllerFlowMeter", new[] { "Purpose" }, new[] { "IfcFlowController" }));
			ret.Add(new PropertySetInfo("Pset_SpaceParking", new[] { "HandicapAccessible", "ParkingUse", "ParkingUnits" }, new[] { "IfcSpace" }));
			ret.Add(new PropertySetInfo("Pset_TankTypeSectional", new[] { "NumberOfSections", "SectionLength", "SectionWidth" }, new[] { "IfcTankType" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeCommon", new[] { "RatedShortCircuitCurrent", "CutOffCurrent", "MaximumRatedVoltage", "LimitingTerminalSize", "SwitchingDuty", "CharacteristicTripCurve", "ProtectiveTagType", "StandardUsed" }, new[] { "IfcProtectiveDeviceType" }));
			ret.Add(new PropertySetInfo("Pset_MultiStateOutput", new[] { "NumberOfStates", "StateText", "AlarmValues", "EventEnable", "NotifyType" }, new[] { "IfcDistributionControlElement" }));
			ret.Add(new PropertySetInfo("Pset_LightFixtureTypeExitSign", new[] { "MinimumTextHeight", "SelfTestFunction", "BackupSupplySystem", "PictogramEscapeDirection", "Addressablility" }, new[] { "IfcLightFixtureType" }));
			ret.Add(new PropertySetInfo("Pset_HeatExchangerTypeCommon", new[] { "Arrangement", "ShellMaterial" }, new[] { "IfcHeatExchangerType" }));
			ret.Add(new PropertySetInfo("Pset_ChillerPHistory", new[] { "Capacity", "EnergyEfficiencyRatio", "CoefficientOfPerformance", "CapacityCurve", "CoefficientOfPerformanceCurve", "FullLoadRatioCurve" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeValveChamber", new[] { "ChamberLengthOrRadius", "ChamberWidth", "WallMaterial", "WallThickness", "BaseMaterial", "BaseThickness", "AccessCoverMaterial" }, new[] { "IfcDistributionChamberElementType" }));
			ret.Add(new PropertySetInfo("Pset_PipeConnection", new[] { "ConnectionType" }, new[] { "IfcDistributionElement" }));
			ret.Add(new PropertySetInfo("Pset_Asset", new[] { "AssetAccountingType", "AssetTaxType", "AssetInsuranceType" }, new[] { "IfcAsset" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeStarter", new[] { "StarterType" }, new[] { "IfcSwitchingDeviceType" }));
			ret.Add(new PropertySetInfo("Pset_CooledBeamTypeActive", new[] { "AirFlowConfiguration", "AirflowRateRange", "SupplyAirConnectionType", "ConnectionSize" }, new[] { "IfcCooledBeamType" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryColumnShoe", new[] { "ColumnShoeBasePlateThickness", "ColumnShoeBasePlateWidth", "ColumnShoeBasePlateDepth", "ColumnShoeCasingHeight", "ColumnShoeCasingWidth", "ColumnShoeCasingDepth" }, new[] { "IfcDiscreteAccessory", "IfcDiscreteAccessoryType" }));
			ret.Add(new PropertySetInfo("Pset_BuildingWaterStorage", new[] { "WaterStorageRatePerPerson", "OneDayPotableWater", "OneDayEssentialWater", "OneDayCoolingTowerMakeupWater", "OneDayProcessOrProductionWater" }, new[] { "IfcBuilding" }));
			ret.Add(new PropertySetInfo("Pset_StairCommon", new[] { "Reference", "NumberOfRiser", "NumberOfTreads", "RiserHeight", "TreadLength", "RequiredHeadroom", "HandicapAccessible", "IsExternal", "FireRating", "FireExit", "HasNonSkidSurface" }, new[] { "IfcStair" }));
			ret.Add(new PropertySetInfo("Pset_DuctSegmentPHistory", new[] { "LossCoefficient", "AtmosphericPressure", "LeakageCurve", "FluidFlowLeakage" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_QuantityTakeOff", new[] { "Reference", "LayerQuantity", "LocalContext" }, new[] { "IfcElement" }));
			ret.Add(new PropertySetInfo("Pset_ElectricalDeviceCommon", new[] { "NominalCurrent", "UsageCurrent", "NominalVoltage", "ElectricalDeviceNominalPower", "NumberOfPoles", "HasProtectiveEarth", "NominalFrequencyRange", "PhaseAngle", "IP_Code", "InsulationStandardClass", "PhaseReference" }, new[] { "IfcDistributionElement" }));
			ret.Add(new PropertySetInfo("Pset_BoilerPHistory", new[] { "EnergySourceConsumption", "OperationalEfficiency", "CombustionEfficiency", "WorkingPressure", "CombustionTemperature", "PartLoadRatio", "Load", "PrimaryEnergyConsumption", "AuxiliaryEnergyConsumption" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeSink", new[] { "SinkType", "SinkMounting", "NominalLength", "NominalWidth", "NominalDepth", "Material", "Color", "DrainSize" }, new[] { "IfcSanitaryTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeBath", new[] { "BathType", "NominalLength", "NominalWidth", "NominalDepth", "Material", "MaterialThickness", "Color", "DrainSize", "HasGrabHandles" }, new[] { "IfcSanitaryTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_ActuatorTypeRotationalActuation", new[] { "Torque", "RangeAngle" }, new[] { "IfcActuatorType" }));
			ret.Add(new PropertySetInfo("Pset_EnergyConversionDeviceCoil", new[] { "HasSoundAttentuation" }, new[] { "IfcEnergyConversionDevice" }));
			ret.Add(new PropertySetInfo("Pset_FanPHistory", new[] { "FanRotationSpeed", "WheelTipSpeed", "FanEfficiency", "OverallEfficiency", "FanPowerRate", "ShaftPowerRate", "PressureCurve", "EfficiencyCurve", "DischargeVelocity", "DischargePressureLoss", "DrivePowerLoss" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_LightFixtureTypeThermal", new[] { "MaximumPlenumSensibleLoad", "MaximumSpaceSensibleLoad", "SensibleLoadToRadiant" }, new[] { "IfcLightFixtureType" }));
			ret.Add(new PropertySetInfo("Pset_FanTypeSmokeControl", new[] { "OperationalCriteria", "MaximumDesignTemperature", "SmokeControlFlowrate" }, new[] { "IfcFanType" }));
			ret.Add(new PropertySetInfo("Pset_DistributionPortDuct", new[] { "PortNumber", "ConnectionType" }, new[] { "IfcDistributionPort" }));
			ret.Add(new PropertySetInfo("Pset_DistributionPortPipe", new[] { "PortNumber", "ConnectionType" }, new[] { "IfcDistributionPort" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeEmergencyStop", new[] { "SwitchOperation" }, new[] { "IfcSwitchingDeviceType" }));
			ret.Add(new PropertySetInfo("Pset_ValvePHistory", new[] { "PercentageOpen", "MeasuredFlowRate", "MeasuredPressureDrop" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_ConcreteElementQuantityGeneral", new[] { "TotalConcreteQuantity", "TotalRebarQuantity", "TotalAccessoryQuantity" }, new[] { "IfcBeam", "IfcBuildingElementPart", "IfcBuildingElementProxy", "IfcColumn", "IfcCovering", "IfcCurtainWall", "IfcDoor", "IfcFooting", "IfcMember", "IfcPile", "IfcRailing", "IfcRamp", "IfcRampFlight", "IfcRoof", "IfcSlab", "IfcStair", "IfcStairFlight", "IfcWall", "IfcWallStandardCase" }));
			ret.Add(new PropertySetInfo("Pset_ThermalLoadDesignCriteria", new[] { "OccupancyDiversity", "OutsideAirPerPerson", "ReceptacleLoadIntensity", "AppliancePercentLoadToRadiant", "LightingLoadIntensity", "LightingPercentLoadToReturnAir" }, new[] { "IfcSpatialStructureElement", "IfcSystem", "IfcBuilding", "IfcZone" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeMixing", new[] { "MixerControl", "OutletConnectionSize" }, new[] { "IfcValveType" }));
			ret.Add(new PropertySetInfo("Pset_CooledBeamTypeCommon", new[] { "IsFreeHanging", "WaterFlowControlSystemType", "WaterPressureRange", "Material", "NominalCoolingCapacity", "NominalSurroundingTemperatureCooling", "NominalSurroundingHumidityCooling", "NominalSupplyWaterTemperatureCooling", "NominalReturnWaterTemperatureCooling", "NominalWaterFlowCooling", "NominalHeatingCapacity", "NominalSurroundingTemperatureHeating", "NominalSupplyWaterTemperatureHeating", "NominalReturnWaterTemperatureHeating", "NominalWaterFlowHeating", "IntegratedLightingType", "PipeConnectionEnum", "FinishColor", "Weight", "CoilLength", "CoilWidth", "ConnectionSize" }, new[] { "IfcCooledBeamType" }));
			ret.Add(new PropertySetInfo("Pset_AirSideSystemInformation", new[] { "Name", "Description", "AirSideSystemType", "AirSideSystemDistributionType", "TotalAirflow", "EnergyGainTotal", "AirflowSensible", "EnergyGainSensible", "EnergyLoss", "LightingDiversity", "InfiltrationDiversitySummer", "InfiltrationDiversityWinter", "ApplianceDiversity", "LoadSafetyFactor", "HeatingTemperatureDelta", "CoolingTemperatureDelta", "Ventilation", "FanPower" }, new[] { "IfcSpatialStructureElement", "IfcSystem" }));
			ret.Add(new PropertySetInfo("Pset_DamperTypeSmokeDamper", new[] { "ControlType" }, new[] { "IfcDamperType" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeGreaseInterceptor", new[] { "NominalBodyMaterial", "NominalBodyLength", "NominalBodyWidth", "BodyDepth", "StrainerMaterial", "StrainerDiameter", "StrainerDepth", "InletConnectionSize", "OutletConnectionSize", "CoverLength", "CoverWidth", "CoverMaterial" }, new[] { "IfcWasteTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_RoofCommon", new[] { "Reference", "FireRating", "IsExternal", "ProjectedArea", "TotalArea" }, new[] { "IfcRoof" }));
			ret.Add(new PropertySetInfo("Pset_ActuatorTypeLinearActuation", new[] { "Force", "Stroke" }, new[] { "IfcActuatorType" }));
			ret.Add(new PropertySetInfo("Pset_TankTypeExpansion", new[] { "ChargePressure", "PressureRegulatorSetting", "ReliefValveSetting" }, new[] { "IfcTankType" }));
			ret.Add(new PropertySetInfo("Pset_EnergyConsumptionPHistoryFuel", new[] { "Temperature", "Pressure", "Flowrate" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_FlowStorageDeviceTank", new[] { "TankComposition", "HasLadder", "HasVisualIndicator" }, new[] { "IfcFlowStorageDevice" }));
			ret.Add(new PropertySetInfo("Pset_HumidifierPHistory", new[] { "AtmosphericPressure", "SaturationEfficiency", "SaturationEfficiencyCurve", "AirPressureDropCurve" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_SpaceHeaterPHistoryCommon", new[] { "FractionRadiantHeatTransfer", "FractionConvectiveHeatTransfer", "Effectiveness", "SurfaceTemperature", "SpaceAirTemperature", "SpaceMeanRadiantTemperature", "AuxiliaryEnergySourceConsumption", "UACurve", "OutputCapacityCurve", "AirResistanceCurve", "Exponent", "HeatOutputRate" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_TransportElementElevator", new[] { "ClearWidth", "ClearDepth", "ClearHeight" }, new[] { "IfcTransportElement" }));
			ret.Add(new PropertySetInfo("Pset_ConcreteElementSurfaceFinishQuantityGeneral", new[] { "FormSurface", "ExternalSurface", "SurfaceDescriptionDocReference" }, new[] { "IfcBeam", "IfcBuildingElementPart", "IfcBuildingElementProxy", "IfcColumn", "IfcCovering", "IfcCurtainWall", "IfcDoor", "IfcFooting", "IfcMember", "IfcPile", "IfcRailing", "IfcRamp", "IfcRampFlight", "IfcRoof", "IfcSlab", "IfcStair", "IfcStairFlight", "IfcWall", "IfcWallStandardCase" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeSanitaryFountain", new[] { "FountainType", "Mounting", "NominalLength", "NominalWidth", "NominalDepth", "Material", "Color", "DrainSize" }, new[] { "IfcSanitaryTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeVaristor", new[] { "VaristorType" }, new[] { "IfcProtectiveDeviceType" }));
			ret.Add(new PropertySetInfo("Pset_CoilTypeCommon", new[] { "OperationalTemperatureRange", "AirflowRateRange", "NominalSensibleCapacity", "NominalLatentCapacity", "NominalUA" }, new[] { "IfcCoilType" }));
			ret.Add(new PropertySetInfo("Pset_FurnitureTypeChair", new[] { "SeatingHeight", "HighestSeatingHeight", "LowestSeatingHeight" }, new[] { "IfcFurnitureType" }));
			ret.Add(new PropertySetInfo("Pset_FurnitureTypeTable", new[] { "WorksurfaceArea", "NumberOfChairs" }, new[] { "IfcFurnitureType" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeManhole", new[] { "InvertLevel", "SoffitLevel", "WallMaterial", "WallThickness", "BaseMaterial", "BaseThickness", "IsShallow", "HasSteps", "WithBackdrop", "AccessCoverMaterial", "AccessLengthOrRadius", "AccessWidth", "AccessCoverLoadRating" }, new[] { "IfcDistributionChamberElementType" }));
			ret.Add(new PropertySetInfo("Pset_FlowFittingPipeFitting", new[] { "InteriorRoughnessCoefficient", "Color" }, new[] { "IfcFlowFitting" }));
			ret.Add(new PropertySetInfo("Pset_SpaceOccupancyRequirements", new[] { "OccupancyType", "OccupancyNumber", "OccupancyNumberPeak", "OccupancyTimePerDay", "AreaPerOccupant", "MinimumHeadroom", "IsOutlookDesirable" }, new[] { "IfcSpace", "IfcZone" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeFaucet", new[] { "FaucetType", "FaucetOperation", "FaucetFunction", "Finish", "FaucetTopDescription" }, new[] { "IfcValveType" }));
			ret.Add(new PropertySetInfo("Pset_FlowMeterTypeGasMeter", new[] { "GasType", "ConnectionSize", "MaximumFlowRate", "MaximumPressureLoss" }, new[] { "IfcFlowMeterType" }));
			ret.Add(new PropertySetInfo("Pset_PipeConnectionFlanged", new[] { "FlangeTable", "FlangeStandard", "BoreSize", "Material", "FlangeDiameter", "FlangeThickness", "NumberOfBoltholes", "BoltSize", "BoltholePitch" }, new[] { "IfcDistributionElement" }));
			ret.Add(new PropertySetInfo("Pset_CooledBeamPHistory", new[] { "TotalCoolingCapacity", "TotalHeatingCapacity", "BeamCoolingCapacity", "BeamHeatingCapacity", "CoolingWaterFlowRate", "HeatingWaterFlowRate", "CorrectionFactorForCooling", "CorrectionFactorForHeating", "WaterPressureDropCurves", "SupplyWaterTemperatureCooling", "ReturnWaterTemperatureCooling", "SupplyWaterTemperatureHeating", "ReturnWaterTemperatureHeating" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeCommon", new[] { "NumberOfGangs", "SwitchFunction", "HasLock" }, new[] { "IfcSwitchingDeviceType" }));
			ret.Add(new PropertySetInfo("Pset_AirToAirHeatRecoveryPHist", new[] { "SensibleEffectiveness", "TotalEffectiveness", "TemperatureEffectiveness", "DefrostTemperatureEffectiveness", "HumidityEffectiveness", "SensibleHeatTransferRate", "LatentHeatTransferRate", "TotalHeatTransferRate", "SensibleEffectivenessTable", "TotalEffectivenessTable", "AirPressureDropCurves" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_Reliability", new[] { "MeanTimeBetweenFailure" }, new[] { "IfcProduct" }));
			ret.Add(new PropertySetInfo("Pset_PackingInstructions", new[] { "PackingCareType", "WrappingMaterial", "ContainerMaterial", "SpecialInstructions" }, new[] { "IfcProduct" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeFloorTrap", new[] { "NominalBodyLength", "NominalBodyWidth", "NominalBodyDepth", "IsForSullageWater", "SpilloverLevel", "BodyMaterial", "TrapType", "HasStrainer", "OutletConnectionSize", "InletPatternType", "InletConnectionSize", "CoverLength", "CoverWidth", "CoverMaterial" }, new[] { "IfcWasteTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeCommon", new[] { "ValvePattern", "ValveOperation", "ValveMechanism", "Size", "BodyMaterial", "OperatingMechanismMaterial", "TestPressure", "WorkingPressure", "FlowCoefficient", "CloseOffRating" }, new[] { "IfcValveType" }));
			ret.Add(new PropertySetInfo("Pset_Risk", new[] { "RiskType", "NatureOfRisk", "SubNatureOfRisk1", "SubNatureOfRisk2", "RiskCause", "AssessmentOfRisk", "RiskConsequence", "RiskRating", "RiskOwner", "AffectsSurroundings", "PreventiveMeassures" }, new[] { "IfcObject" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeDrawOffCock", new[] { "HasHoseUnion" }, new[] { "IfcValveType" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcingBarBendingsISOCD3766Common", new[] { "ISOCD3766ShapeCode", "ISOCD3766ShapeParameter_a", "ISOCD3766ShapeParameter_b", "ISOCD3766ShapeParameter_c", "ISOCD3766ShapeParameter_d", "ISOCD3766ShapeParameter_e", "ISOCD3766ShapeParameter_R", "ISOCD3766BendingStartHook", "ISOCD3766BendingEndHook" }, new[] { "IfcReinforcingBar" }));
			ret.Add(new PropertySetInfo("Pset_ElectricDistributionPointCommon", new[] { "IsMain", "NumberOfDoors", "CaseMaterial", "CaseWeight", "NumberOfOpenings" }, new[] { "IfcElectricDistributionPoint" }));
			ret.Add(new PropertySetInfo("Pset_RampFlightCommon", new[] { "Reference", "Headroom", "Slope" }, new[] { "IfcRampFlight" }));
			ret.Add(new PropertySetInfo("Pset_BuildingUse", new[] { "MarketCategory", "MarketSubCategory", "PlanningControlStatus", "NarrativeText", "VacancyRateInCategoryNow", "TenureModesAvailableNow", "MarketSubCategoriesAvailableNow", "RentalRatesInCategoryNow", "VacancyRateInCategoryFuture", "TenureModesAvailableFuture", "MarketSubCategoriesAvailableFuture", "RentalRatesInCategoryFuture" }, new[] { "IfcBuilding" }));
			ret.Add(new PropertySetInfo("Pset_DistributionFlowElementCommon", new[] { "Reference" }, new[] { "IfcDistributionFlowElement", "IfcDistributionChamberElement", "IfcEnergyConversionDevice", "IfcFlowController", "IfcFlowFitting", "IfcFlowMovingDevice", "IfcFlowSegment", "IfcFlowStorageDevice", "IfcFlowTerminal", "IfcFlowTreatmentDevice" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypePressureRelief", new[] { "ReliefPressure" }, new[] { "IfcValveType" }));
			ret.Add(new PropertySetInfo("Pset_FanTypeCommon", new[] { "MotorDriveType", "CapacityControlType", "OperationTemperatureRange", "WheelMaterial", "HousingMaterial", "Weight", "NominalAirFlowRate", "NominalTotalPressure", "NominalStaticPressure", "NominalRotationSpeed", "NominalPowerRate", "OperationalCriteria" }, new[] { "IfcFanType" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeGasTap", new[] { "HasHoseUnion" }, new[] { "IfcValveType" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypePetrolInterceptor", new[] { "BodyMaterial", "NominalBodyLength", "NominalBodyWidth", "NominalBodyDepth", "InletConnectionSize", "OutletConnectionSize", "CoverLength", "CoverWidth", "CoverMaterial", "VentilatingPipeSize" }, new[] { "IfcWasteTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_Permit", new[] { "PermitType", "EscortRequirement", "StartDate", "PermitDuration", "StartTime", "EndTime", "SpecialRequirements" }, new[] { "IfcPermit" }));
			ret.Add(new PropertySetInfo("Pset_FlowFittingDuctFitting", new[] { "AbsoluteRoughnessFactor", "HasLiner", "Color" }, new[] { "IfcFlowFitting" }));
			ret.Add(new PropertySetInfo("Pset_SpaceHeaterTypeCommon", new[] { "TemperatureClassification", "HeatingSource", "Material", "BodyMass", "ThermalMassHeatCapacity", "OutputCapacity", "ThermalEfficiency" }, new[] { "IfcSpaceHeaterType" }));
			ret.Add(new PropertySetInfo("Pset_MultiStateInput", new[] { "NumberOfStates", "StateText", "AlarmValues", "EventEnable", "NotifyType" }, new[] { "IfcDistributionControlElement" }));
			ret.Add(new PropertySetInfo("Pset_DoorCommon", new[] { "Reference", "FireRating", "AcousticRating", "SecurityRating", "IsExternal", "Infiltration", "ThermalTransmittance", "GlazingAreaFraction", "HandicapAccessible", "FireExit", "SelfClosing", "SmokeStop" }, new[] { "IfcDoor" }));
			ret.Add(new PropertySetInfo("Pset_ActionRequest", new[] { "RequestSourceType", "RequestSourceLabel", "RequestSourceName", "RequestDescription", "RequestComments", "Status" }, new[] { "IfcActionRequest" }));
			ret.Add(new PropertySetInfo("Pset_Draughting", new[] { "LayerName", "Colour" }, new[] { "IfcElement", "IfcSpatialStructureElement" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcingBarBendingsBECCommon", new[] { "BECBarShapeCode", "BECCuttingLength", "BECShapeParameter_a", "BECShapeParameter_b", "BECShapeParameter_c", "BECShapeParameter_d", "BECShapeParameter_e", "BECShapeParameter_f", "BECShapeParameter_g", "BECShapeParameter_h", "BECShapeParameter_i", "BECShapeParameter_j", "BECShapeParameter_k", "BECShapeParameter_l", "BECBendingParameter_u", "BECBendingParameter_v", "BECBendingParameter_u1", "BECBendingParameter_v1", "BECShapeAid_x", "BECShapeAid_y", "BECRollerDiameter" }, new[] { "IfcReinforcingBar", "IfcReinforcingMesh" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryCornerFixingPlate", new[] { "CornerFixingPlateLength", "CornerFixingPlateThickness", "CornerFixingPlateFlangeWidthInPlaneZ", "CornerFixingPlateFlangeWidthInPlaneX" }, new[] { "IfcDiscreteAccessory", "IfcDiscreteAccessoryType" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeSwitchDisconnector", new[] { "SwitchDisconnectorType", "LoadDisconnectionType", "HasVisualIndication" }, new[] { "IfcSwitchingDeviceType" }));
			ret.Add(new PropertySetInfo("Pset_PipeSegmentTypeGutter", new[] { "Slope", "FlowRating" }, new[] { "IfcPipeSegmentType" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeBidet", new[] { "BidetMounting", "NominalLength", "NominalWidth", "NominalDepth", "Material", "Color", "SpilloverLevel", "DrainSize" }, new[] { "IfcSanitaryTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_PipeFittingPHistory", new[] { "LossCoefficient", "FlowrateLeakage" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_DuctConnection", new[] { "ConnectionType" }, new[] { "IfcDistributionElement" }));
			ret.Add(new PropertySetInfo("Pset_AirTerminalPHistory", new[] { "AirFlowRate", "NeckAirVelocity", "SupplyAirTemperatureHeating", "SupplyAirTemperatureCooling", "PressureDrop", "InductionRatio", "CenterlineAirVelocity" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_CoolingTowerTypeCommon", new[] { "NominalCapacity", "CircuitType", "FlowArrangement", "SprayType", "CapacityControl", "ControlStrategy", "NumberOfCells", "BasinReserveVolume", "LiftElevationDifference", "WaterRequirement", "OperationTemperatureRange", "CasingMaterial", "FillMaterial", "Weight", "AmbientDesignDryBulbTemperature", "AmbientDesignWetBulbTemperature" }, new[] { "IfcCoolingTowerType" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeFuseDisconnector", new[] { "FuseDisconnectorType" }, new[] { "IfcProtectiveDeviceType" }));
			ret.Add(new PropertySetInfo("Pset_CableCarrierSegmentTypeCableTraySegment", new[] { "NominalLength", "NominalWidth", "NominalHeight", "HasCover" }, new[] { "IfcCableCarrierSegmentType" }));
			ret.Add(new PropertySetInfo("Pset_FlowMovingDeviceCompressor", new[] { "ImpellerDiameter" }, new[] { "IfcFlowMovingDevice" }));
			ret.Add(new PropertySetInfo("Pset_PipeFittingTypeCommon", new[] { "SubType", "Material", "PressureClass", "UnitWeight", "PressureRange", "TemperatureRange", "NominalDiameter", "InnerDiameter", "OuterDiameter", "EndStyleTreatment", "FittingLossFactor" }, new[] { "IfcPipeFittingType" }));
			ret.Add(new PropertySetInfo("Pset_ElectricHeaterTypeElectricalMatHeater", new[] { "HeatOutputPerUnitArea" }, new[] { "IfcElectricHeaterType" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryStandardFixingPlate", new[] { "StandardFixingPlateWidth", "StandardFixingPlateDepth", "StandardFixingPlateThickness" }, new[] { "IfcDiscreteAccessory", "IfcDiscreteAccessoryType" }));
			ret.Add(new PropertySetInfo("Pset_SpaceHeaterTypeHydronic", new[] { "TubingLength", "WaterContent" }, new[] { "IfcSpaceHeaterType" }));
			ret.Add(new PropertySetInfo("Pset_SpaceProgramCommon", new[] { "Location", "FunctionRequirement", "SecurityRequirement", "PrivacyRequirement", "LightingRequirement", "FFETypeRequirement", "EmployeeType", "OccupancyType", "OccupancyNumber" }, new[] { "IfcSpaceProgram" }));
			ret.Add(new PropertySetInfo("Pset_PipeSegmentTypeCommon", new[] { "Material", "WorkingPressure", "UnitWeight", "PressureRange", "TemperatureRange", "NominalDiameter", "InnerDiameter", "OuterDiameter", "EndStyleTreatment" }, new[] { "IfcPipeSegmentType" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeSump", new[] { "Length", "Width", "InvertLevel" }, new[] { "IfcDistributionChamberElementType" }));
			ret.Add(new PropertySetInfo("Pset_CableCarrierSegmentTypeCableTrunkingSegment", new[] { "NominalLength", "NominalWidth", "NominalHeight", "NumberOfCompartments" }, new[] { "IfcCableCarrierSegmentType" }));
			ret.Add(new PropertySetInfo("Pset_SpaceLightingRequirements", new[] { "ArtificialLighting", "Illuminance" }, new[] { "IfcSpace", "IfcZone" }));
			ret.Add(new PropertySetInfo("Pset_CoilPHistory", new[] { "AtmosphericPressure", "AirPressureDropCurve", "SoundCurve", "FaceVelocity" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_FilterTypeAirParticleFilter", new[] { "AirParticleFilterType", "FrameMaterial", "MediaMaterial", "SeparationType", "DustHoldingCapacity", "FaceSurfaceArea", "MediaExtendedArea", "NominalCountedEfficiency", "NominalWeightedEfficiency", "PressureDropCurve", "CountedEfficiencyCurve", "WeightedEfficiencyCurve" }, new[] { "IfcFilterType" }));
			ret.Add(new PropertySetInfo("Pset_AirTerminalTypeRectangular", new[] { "FaceType" }, new[] { "IfcAirTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_ProjectCommon", new[] { "ConstructionMode", "BuildingPermitId", "GrossAreaPlanned" }, new[] { "IfcProject" }));
			ret.Add(new PropertySetInfo("Pset_HumidifierTypeCommon", new[] { "Application", "Weight", "NominalMoistureGain", "NominalAirFlowRate", "InternalControl", "WaterRequirement" }, new[] { "IfcHumidifierType" }));
			ret.Add(new PropertySetInfo("Pset_EvaporativeCoolerPHistory", new[] { "WaterSumpTemperature", "Effectiveness", "SensibleHeatTransferRate", "LatentHeatTransferRate", "TotalHeatTransferRate", "EffectivenessTable", "AirPressureDropCurve", "WaterPressDropCurve" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_ElectricHeaterTypeElectricalCableHeater", new[] { "HeatOutputPerUnitLength" }, new[] { "IfcElectricHeaterType" }));
			ret.Add(new PropertySetInfo("Pset_FlowSegmentDuctSegment", new[] { "MaterialThickness", "InteriorRoughnessCoefficient", "HasLiner", "Length", "Color" }, new[] { "IfcFlowSegment" }));
			ret.Add(new PropertySetInfo("Pset_DrainageCatchment", new[] { "AreaDrained" }, new[] { "IfcSite" }));
			ret.Add(new PropertySetInfo("Pset_ProjectOrderMaintenanceWorkOrder", new[] { "ProductDescription", "ShortJobDescription", "LongJobDescription", "WorkTypeRequested", "ContractualType", "IfNotAccomplished", "MaintenaceType", "FaultPriorityType", "LocationPriorityType", "ScheduledFrequency" }, new[] { "IfcProjectOrder" }));
			ret.Add(new PropertySetInfo("Pset_DamperTypeFireDamper", new[] { "ActuationType", "ClosureRatingEnum", "FireResistanceRating", "FusibleLinkTemperature" }, new[] { "IfcDamperType" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcingBarBendingsBS8666Common", new[] { "BS8666ShapeCode", "BS8666ShapeParameter_A", "BS8666ShapeParameter_B", "BS8666ShapeParameter_C", "BS8666ShapeParameter_D", "BS8666ShapeParameter_E", "BS8666ShapeParameter_r" }, new[] { "IfcReinforcingBar" }));
			ret.Add(new PropertySetInfo("Pset_CoolingTowerPHistory", new[] { "Capacity", "HeatTransferCoefficient", "SumpHeaterPower", "UACurve", "Performance" }, new[] { "IfcPerformanceHistory" }));
			ret.Add(new PropertySetInfo("Pset_HeatExchangerTypePlate", new[] { "NumberOfPlates" }, new[] { "IfcHeatExchangerType" }));
			ret.Add(new PropertySetInfo("Pset_DrainageOutfall", new[] { "InvertLevel" }, new[] { "IfcProxy" }));
			ret.Add(new PropertySetInfo("Pset_EnergyConversionDeviceSpaceHeaterPanel", new[] { "NumberOfPanels" }, new[] { "IfcEnergyConversionDevice" }));
			ret.Add(new PropertySetInfo("Pset_OpeningElementCommon", new[] { "Reference", "Purpose", "FireExit", "ProtectedOpening", "ParallelJambs" }, new[] { "IfcOpeningElement" }));
			ret.Add(new PropertySetInfo("Pset_FlowMovingDeviceFanCentrifugal", new[] { "DischargePosition", "DirectionOfRotation", "Arrangement" }, new[] { "IfcFlowMovingDevice" }));
			ret.Add(new PropertySetInfo("Pset_FlowMovingDevicePump", new[] { "ImpellerDiameter", "BaseType", "DriveConnectionType" }, new[] { "IfcFlowMovingDevice" }));
			ret.Add(new PropertySetInfo("Pset_ManufacturerOccurrence", new[] { "AcquisitionDate", "BarCode", "SerialNumber", "BatchReference" }, new[] { "IfcElement" }));
			ret.Add(new PropertySetInfo("Pset_FurnitureTypeFileCabinet", new[] { "WithLock" }, new[] { "IfcFurnitureType" }));
			ret.Add(new PropertySetInfo("Pset_AirTerminalBoxTypeCommon", new[] { "AirflowRateRange", "AirPressureRange", "NominalAirFlowRate", "ArrangementType", "ReheatType", "HasSoundAttenuator", "HasReturnAir", "HasFan", "NominalInletAirPressure", "NominalDamperDiameter", "Material", "HousingThickness", "OperationTemperatureRange", "ReturnAirFractionRange", "Weight" }, new[] { "IfcAirTerminalBoxType" }));
			ret.Add(new PropertySetInfo("Pset_ActuatorTypePneumaticActuator", new[] { "InputPressure", "InputFlowrate" }, new[] { "IfcActuatorType" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeToiletPan", new[] { "ToiletType", "ToiletPanType", "PanMounting", "PanMaterial", "PanColor", "SpilloverLevel", "NominalLength", "NominalWidth", "NominalDepth" }, new[] { "IfcSanitaryTerminalType" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryLadderTrussConnector", new[] { "LadderTrussHeight", "LadderTrussLength", "LadderTrussCrossBarSpacing", "LadderTrussBaseBarDiameter", "LadderTrussSecondaryBarDiameter", "LadderTrussCrossBarDiameter" }, new[] { "IfcDiscreteAccessory", "IfcDiscreteAccessoryType" }));
			ret.Add(new PropertySetInfo("Pset_FurnitureTypeDesk", new[] { "WorksurfaceArea" }, new[] { "IfcFurnitureType" }));
			ret.Add(new PropertySetInfo("Pset_OutsideDesignCriteria", new[] { "HeatingDryBulb", "HeatingWetBulb", "HeatingDesignDay", "CoolingDryBulb", "CoolingWetBulb", "CoolingDesignDay", "WeatherDataStation", "WeatherDataDate", "BuildingThermalExposure", "PrevailingWindDirection", "PrevailingWindVelocity" }, new[] { "IfcBuilding" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeFormedDuct", new[] { "ClearWidth", "ClearDepth", "WallMaterial", "WallThickness", "BaseMaterial", "BaseThickness", "AccessCoverMaterial", "AccessCoverLoadRating", "FillMaterial" }, new[] { "IfcDistributionChamberElementType" }));
			return ret;
		}

		private static List<PropertySetInfo> GetPropertiesIFC4()
		{
			var ret = new List<PropertySetInfo>();
			ret.Add(new PropertySetInfo("Pset_DuctFittingOccurrence", new[] { "InteriorRoughnessCoefficient", "HasLiner", "Color" }, new[] { "IfcDuctFitting" }));
			ret.Add(new PropertySetInfo("Pset_CableSegmentTypeCoreSegment", new[] { "OverallDiameter", "RatedVoltage", "RatedTemperature", "ScreenDiameter", "CoreIdentifier", "SheathColors", "Weight", "SelfExtinguishing60332_1", "SelfExtinguishing60332_3", "HalogenProof", "FunctionReliable", "Standard" }, new[] { "IfcCableSegment" }));
			ret.Add(new PropertySetInfo("Pset_UnitaryEquipmentTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcUnitaryEquipment" }));
			ret.Add(new PropertySetInfo("Pset_PrecastConcreteElementFabrication", new[] { "TypeDesignator", "ProductionLotId", "SerialNumber", "PieceMark", "AsBuiltLocationNumber", "ActualProductionDate", "ActualErectionDate" }, new[] { "IfcBuildingElement" }));
			ret.Add(new PropertySetInfo("Pset_DuctFittingTypeCommon", new[] { "Reference", "Status", "PressureClass", "PressureRange", "TemperatureRange" }, new[] { "IfcDuctFitting" }));
			ret.Add(new PropertySetInfo("Pset_InterceptorTypeCommon", new[] { "Reference", "Status", "NominalBodyLength", "NominalBodyWidth", "NominalBodyDepth", "InletConnectionSize", "OutletConnectionSize", "CoverLength", "CoverWidth", "VentilatingPipeSize" }, new[] { "IfcInterceptor" }));
			ret.Add(new PropertySetInfo("Pset_AudioVisualApplianceTypePlayer", new[] { "PlayerType", "PlayerMediaEject", "PlayerMediaFormat" }, new[] { "IfcAudioVisualAppliance" }));
			ret.Add(new PropertySetInfo("Pset_SoundAttenuation", new[] { "SoundScale", "SoundFrequency", "SoundPressure" }, new[] { "IfcAnnotation" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeInspectionChamber", new[] { "ChamberLengthOrRadius", "ChamberWidth", "InvertLevel", "SoffitLevel", "WallMaterial", "WallThickness", "BaseMaterial", "BaseThickness", "WithBackdrop", "AccessCoverMaterial", "AccessLengthOrRadius", "AccessWidth", "AccessCoverLoadRating" }, new[] { "IfcDistributionChamberElement" }));
			ret.Add(new PropertySetInfo("Pset_CooledBeamPHistoryActive", new[] { "AirFlowRate", "Throw", "AirPressureDropCurves" }, new[] { "IfcCooledBeam" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeRadiationSensor", new[] { "SetPointRadiation" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_AudioVisualApplianceTypeProjector", new[] { "ProjectorType", "VideoResolutionWidth", "VideoResolutionHeight", "VideoResolutionMode", "VideoScaleMode", "VideoCaptionMode" }, new[] { "IfcAudioVisualAppliance" }));
			ret.Add(new PropertySetInfo("Pset_BuildingElementProxyProvisionForVoid", new[] { "Shape", "Width", "Height", "Diameter", "Depth", "System" }, new[] { "IfcBuildingElementProxy" }));
			ret.Add(new PropertySetInfo("Pset_StackTerminalTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcStackTerminal" }));
			ret.Add(new PropertySetInfo("Pset_CableSegmentTypeCableSegment", new[] { "Standard", "NumberOfCores", "OverallDiameter", "RatedVoltage", "RatedTemperature", "ScreenDiameter", "HasProtectiveEarth", "MaximumOperatingTemperature", "MaximumShortCircuitTemperature", "SpecialConstruction", "Weight", "SelfExtinguishing60332_1", "SelfExtinguishing60332_3", "HalogenProof", "FunctionReliable" }, new[] { "IfcCableSegment" }));
			ret.Add(new PropertySetInfo("Pset_PrecastSlab", new[] { "TypeDesignator", "ToppingType", "EdgeDistanceToFirstAxis", "DistanceBetweenComponentAxes", "AngleToFirstAxis", "AngleBetweenComponentAxes", "NominalThickness", "NominalToppingThickness" }, new[] { "IfcSlab" }));
			ret.Add(new PropertySetInfo("Pset_LightFixtureTypeCommon", new[] { "Reference", "Status", "NumberOfSources", "TotalWattage", "LightFixtureMountingType", "LightFixturePlacingType", "MaintenanceFactor", "MaximumPlenumSensibleLoad", "MaximumSpaceSensibleLoad", "SensibleLoadToRadiant" }, new[] { "IfcLightFixture" }));
			ret.Add(new PropertySetInfo("Pset_BeamCommon", new[] { "Reference", "Status", "Span", "Slope", "Roll", "IsExternal", "ThermalTransmittance", "LoadBearing", "FireRating" }, new[] { "IfcBeam" }));
			ret.Add(new PropertySetInfo("Pset_ElectricMotorTypeCommon", new[] { "Reference", "Status", "MaximumPowerOutput", "ElectricMotorEfficiency", "StartCurrentFactor", "StartingTime", "TeTime", "LockedRotorCurrent", "MotorEnclosureType", "FrameSize", "IsGuarded", "HasPartWinding" }, new[] { "IfcElectricMotor" }));
			ret.Add(new PropertySetInfo("Pset_SiteCommon", new[] { "Reference", "BuildableArea", "SiteCoverageRatio", "FloorAreaRatio", "BuildingHeightLimit", "TotalArea" }, new[] { "IfcSite" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeGullySump", new[] { "NominalSumpLength", "NominalSumpWidth", "NominalSumpDepth", "GullyType", "TrapType", "OutletConnectionSize", "BackInletPatternType", "InletConnectionSize", "CoverLength", "CoverWidth" }, new[] { "IfcWasteTerminal" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeGullyTrap", new[] { "NominalBodyLength", "NominalBodyWidth", "NominalBodyDepth", "GullyType", "HasStrainer", "TrapType", "OutletConnectionSize", "BackInletPatternType", "InletConnectionSize", "CoverLength", "CoverWidth" }, new[] { "IfcWasteTerminal" }));
			ret.Add(new PropertySetInfo("Pset_ConcreteElementGeneral", new[] { "ConstructionMethod", "StructuralClass", "StrengthClass", "ExposureClass", "ReinforcementVolumeRatio", "ReinforcementAreaRatio", "DimensionalAccuracyClass", "ConstructionToleranceClass", "ConcreteCover", "ConcreteCoverAtMainBars", "ConcreteCoverAtLinks", "ReinforcementStrengthClass" }, new[] { "IfcBuildingElement" }));
			ret.Add(new PropertySetInfo("Pset_UnitaryEquipmentTypeAirConditioningUnit", new[] { "SensibleCoolingCapacity", "LatentCoolingCapacity", "CoolingEfficiency", "HeatingCapacity", "HeatingEfficiency", "CondenserFlowrate", "CondenserEnteringTemperature", "CondenserLeavingTemperature", "OutsideAirFlowrate" }, new[] { "IfcUnitaryEquipment" }));
			ret.Add(new PropertySetInfo("Pset_ProfileMechanical", new[] { "MassPerLength", "CrossSectionArea", "Perimeter", "MinimumPlateThickness", "MaximumPlateThickness", "CentreOfGravityInX", "CentreOfGravityInY", "ShearCentreZ", "ShearCentreY", "MomentOfInertiaY", "MomentOfInertiaZ", "MomentOfInertiaYZ", "TorsionalConstantX", "WarpingConstant", "ShearDeformationAreaZ", "ShearDeformationAreaY", "MaximumSectionModulusY", "MinimumSectionModulusY", "MaximumSectionModulusZ", "MinimumSectionModulusZ", "TorsionalSectionModulus", "ShearAreaZ", "ShearAreaY", "PlasticShapeFactorY", "PlasticShapeFactorZ" }, new[] { "IfcProfileDef" }));
			ret.Add(new PropertySetInfo("Pset_ControllerTypeProportional", new[] { "ControlType", "Labels", "Range", "Value", "ProportionalConstant", "IntegralConstant", "DerivativeConstant", "SignalTimeIncrease", "SignalTimeDecrease" }, new[] { "IfcController" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeWashHandBasin", new[] { "WashHandBasinType", "Mounting", "NominalLength", "NominalWidth", "NominalDepth", "Color", "DrainSize", "MountingOffset" }, new[] { "IfcSanitaryTerminal" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTrippingFunctionLCurve", new[] { "IsSelectable", "UpperCurrent1", "UpperCurrent2", "UpperTime1", "UpperTime2", "LowerCurrent1", "LowerCurrent2", "LowerTime1", "LowerTime2" }, new[] { "IfcProtectiveDeviceTrippingUnit" }));
			ret.Add(new PropertySetInfo("Pset_DuctSegmentOccurrence", new[] { "InteriorRoughnessCoefficient", "HasLiner", "Color" }, new[] { "IfcDuctSegment" }));
			ret.Add(new PropertySetInfo("Pset_SpaceThermalLoad", new[] { "People", "Lighting", "EquipmentSensible", "VentilationIndoorAir", "VentilationOutdoorAir", "RecirculatedAir", "ExhaustAir", "AirExchangeRate", "DryBulbTemperature", "RelativeHumidity", "InfiltrationSensible", "TotalSensibleLoad", "TotalLatentLoad", "TotalRadiantLoad" }, new[] { "IfcSpace" }));
			ret.Add(new PropertySetInfo("Pset_UnitaryControlElementTypeThermostat", new[] { "TemperatureSetPoint" }, new[] { "IfcUnitaryControlElement" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcementBarPitchOfColumn", new[] { "Description", "Reference", "ReinforcementBarType", "HoopBarPitch", "XDirectionTieHoopBarPitch", "XDirectionTieHoopCount", "YDirectionTieHoopBarPitch", "YDirectionTieHoopCount" }, new[] { "IfcColumn" }));
			ret.Add(new PropertySetInfo("Pset_UnitaryControlElementTypeCommon", new[] { "Reference", "Status", "Mode" }, new[] { "IfcUnitaryControlElement" }));
			ret.Add(new PropertySetInfo("Pset_BuildingSystemCommon", new[] { "Reference" }, new[] { "IfcBuildingSystem" }));
			ret.Add(new PropertySetInfo("Pset_PipeSegmentOccurrence", new[] { "InteriorRoughnessCoefficient", "Color", "Gradient", "InvertElevation" }, new[] { "IfcPipeSegment" }));
			ret.Add(new PropertySetInfo("Pset_ElectricAppliancePHistory", new[] { "PowerState" }, new[] { "IfcElectricAppliance" }));
			ret.Add(new PropertySetInfo("Pset_MotorConnectionTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcMotorConnection" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeFlushing", new[] { "FlushingRate", "HasIntegralShutOffDevice", "IsHighPressure" }, new[] { "IfcValve" }));
			ret.Add(new PropertySetInfo("Pset_StairFlightCommon", new[] { "Reference", "Status", "NumberOfRiser", "NumberOfTreads", "RiserHeight", "TreadLength", "NosingLength", "WalkingLineOffset", "TreadLengthAtOffset", "TreadLengthAtInnerSide", "Headroom", "WaistThickness" }, new[] { "IfcStairFlight" }));
			ret.Add(new PropertySetInfo("Pset_MaterialMechanical", new[] { "DynamicViscosity", "YoungModulus", "ShearModulus", "PoissonRatio", "ThermalExpansionCoefficient" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_DoorWindowShadingType", new[] { "ShadingCoefficient", "ExternalShadingCoefficient", "InternalShadingCoefficient", "InsetShadingCoefficient" }, new[] { "IfcDoor", "IfcWindow" }));
			ret.Add(new PropertySetInfo("Pset_PropertyAgreement", new[] { "AgreementType", "Identifier", "Version", "VersionDate", "PropertyName", "CommencementDate", "TerminationDate", "Duration", "Options", "ConditionCommencement", "Restrictions", "ConditionTermination" }, new[] { "IfcSpatialStructureElement" }));
			ret.Add(new PropertySetInfo("Pset_FilterTypeCompressedAirFilter", new[] { "CompressedAirFilterType", "OperationPressureMax", "ParticleAbsorptionCurve", "AutomaticCondensateDischarge", "CloggingIndicator" }, new[] { "IfcFilter" }));
			ret.Add(new PropertySetInfo("Pset_DamperTypeCommon", new[] { "Reference", "Status", "Operation", "Orientation", "BladeMaterial", "BladeThickness", "SealMaterial", "BladeAction", "BladeShape", "BladeEdge", "NumberofBlades", "FaceArea", "MaximumAirFlowRate", "TemperatureRange", "MaximumWorkingPressure", "TemperatureRating", "NominalAirFlowRate", "OpenPressureDrop", "LeakageFullyClosed", "LossCoefficentCurve", "LeakageCurve", "RegeneratedSoundCurve", "FrameType", "FrameDepth", "FrameMaterial", "FrameThickness", "CloseOffRating" }, new[] { "IfcDamper" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTrippingFunctionICurve", new[] { "IsSelectable", "NominalCurrentAdjusted", "ReleaseCurrent", "ReleaseTime", "CurrentTolerance1", "CurrentToleranceLimit1", "CurrentTolerance2", "IsCurrentTolerancePositiveOnly", "TimeTolerance1", "TimeToleranceLimit1", "TimeTolerance2", "IsTimeTolerancePositiveOnly", "MaxAdjustmentX_ICS", "IsOffWhenSFunctionOn" }, new[] { "IfcProtectiveDeviceTrippingUnit" }));
			ret.Add(new PropertySetInfo("Pset_DamperTypeFireSmokeDamper", new[] { "ControlType", "ActuationType", "ClosureRatingEnum", "FireResistanceRating", "FusibleLinkTemperature" }, new[] { "IfcDamper" }));
			ret.Add(new PropertySetInfo("Pset_SpaceThermalLoadPHistory", new[] { "People", "Lighting", "EquipmentSensible", "VentilationIndoorAir", "VentilationOutdoorAir", "RecirculatedAir", "ExhaustAir", "AirExchangeRate", "DryBulbTemperature", "RelativeHumidity", "InfiltrationSensible", "TotalSensibleLoad", "TotalLatentLoad", "TotalRadiantLoad" }, new[] { "IfcSpace" }));
			ret.Add(new PropertySetInfo("Pset_AlarmTypeCommon", new[] { "Reference", "Status", "Condition" }, new[] { "IfcAlarm" }));
			ret.Add(new PropertySetInfo("Pset_ProfileArbitraryDoubleT", new[] { "OverallWidth", "LeftFlangeWidth", "RightFlangeWidth", "OverallDepth", "FlangeDepth", "FlangeDraft", "FlangeChamfer", "FlangeBaseFillet", "FlangeTopFillet", "StemBaseWidth", "StemTopWidth", "StemBaseChamfer", "StemTopChamfer", "StemBaseFillet", "StemTopFillet" }, new[] { "IfcArbitraryClosedProfileDef" }));
			ret.Add(new PropertySetInfo("Pset_EvaporatorTypeCommon", new[] { "Reference", "Status", "EvaporatorMediumType", "EvaporatorCoolant", "RefrigerantClass", "RefrigerantType", "ExternalSurfaceArea", "InternalSurfaceArea", "InternalRefrigerantVolume", "InternalWaterVolume", "NominalHeatTransferArea", "NominalHeatTransferCoefficient" }, new[] { "IfcEvaporator" }));
			ret.Add(new PropertySetInfo("Pset_FlowMeterOccurrence", new[] { "Purpose" }, new[] { "IfcFlowMeter" }));
			ret.Add(new PropertySetInfo("Pset_LandRegistration", new[] { "LandID", "IsPermanentID", "LandTitleID" }, new[] { "IfcSite" }));
			ret.Add(new PropertySetInfo("Pset_FastenerWeld", new[] { "Type1", "Type2", "Surface1", "Surface2", "Process", "ProcessName", "a", "c", "d", "e", "l", "n", "s", "z", "Intermittent", "Staggered" }, new[] { "IfcFastener" }));
			ret.Add(new PropertySetInfo("Pset_CableSegmentOccurrence", new[] { "DesignAmbientTemperature", "UserCorrectionFactor", "NumberOfParallelCircuits", "InstallationMethod", "InstallationMethodFlagEnum", "DistanceBetweenParallelCircuits", "SoilConductivity", "CarrierStackNumber", "MountingMethod", "IsHorizontalCable", "IsMountedFlatCable", "CurrentCarryingCapasity", "MaximumCableLength", "PowerLoss" }, new[] { "IfcCableSegment" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeGasSensor", new[] { "GasDetected", "SetPointConcentration", "CoverageArea" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_BoilerTypeCommon", new[] { "Reference", "Status", "PressureRating", "OperatingMode", "HeatTransferSurfaceArea", "NominalPartLoadRatio", "WaterInletTemperatureRange", "WaterStorageCapacity", "IsWaterStorageHeater", "PartialLoadEfficiencyCurves", "OutletTemperatureRange", "NominalEnergyConsumption", "EnergySource" }, new[] { "IfcBoiler" }));
			ret.Add(new PropertySetInfo("Pset_BurnerTypeCommon", new[] { "Reference", "Status", "EnergySource" }, new[] { "IfcBurner" }));
			ret.Add(new PropertySetInfo("Pset_RampCommon", new[] { "Reference", "Status", "RequiredHeadroom", "RequiredSlope", "IsExternal", "FireRating", "FireExit", "HandicapAccessible", "HasNonSkidSurface" }, new[] { "IfcRamp" }));
			ret.Add(new PropertySetInfo("Pset_ElectricApplianceTypeElectricCooker", new[] { "ElectricCookerType" }, new[] { "IfcElectricAppliance" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeRadioactivitySensor", new[] { "SetPointRadioactivity" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_PipeFittingTypeBend", new[] { "BendAngle", "BendRadius" }, new[] { "IfcPipeFitting" }));
			ret.Add(new PropertySetInfo("Pset_SpaceThermalRequirements", new[] { "SpaceTemperature", "SpaceTemperatureMax", "SpaceTemperatureMin", "SpaceTemperatureSummerMax", "SpaceTemperatureSummerMin", "SpaceTemperatureWinterMax", "SpaceTemperatureWinterMin", "SpaceHumidity", "SpaceHumidityMax", "SpaceHumidityMin", "SpaceHumiditySummer", "SpaceHumidityWinter", "DiscontinuedHeating", "NaturalVentilation", "NaturalVentilationRate", "MechanicalVentilationRate", "AirConditioning", "AirConditioningCentral" }, new[] { "IfcSpace", "IfcSpatialZone", "IfcZone" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryWireLoop", new[] { "WireLoopBasePlateThickness", "WireLoopBasePlateWidth", "WireLoopBasePlateLength", "WireDiameter", "WireEmbeddingLength", "WireLoopLength" }, new[] { "IfcDiscreteAccessory" }));
			ret.Add(new PropertySetInfo("Pset_CommunicationsAppliancePHistory", new[] { "PowerState" }, new[] { "IfcCommunicationsAppliance" }));
			ret.Add(new PropertySetInfo("Pset_CompressorPHistory", new[] { "CompressorCapacity", "EnergyEfficiencyRatio", "CoefficientOfPerformance", "VolumetricEfficiency", "CompressionEfficiency", "MechanicalEfficiency", "IsentropicEfficiency", "CompressorTotalEfficiency", "ShaftPower", "InputPower", "LubricantPumpHeatGain", "FrictionHeatGain", "CompressorTotalHeatGain", "FullLoadRatio" }, new[] { "IfcCompressor" }));
			ret.Add(new PropertySetInfo("Pset_FireSuppressionTerminalTypeBreechingInlet", new[] { "BreechingInletType", "InletDiameter", "OutletDiameter", "CouplingType", "HasCaps" }, new[] { "IfcFireSuppressionTerminal" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcementBarCountOfIndependentFooting", new[] { "Description", "Reference", "XDirectionLowerBarCount", "YDirectionLowerBarCount", "XDirectionUpperBarCount", "YDirectionUpperBarCount" }, new[] { "IfcFooting" }));
			ret.Add(new PropertySetInfo("Pset_PlateCommon", new[] { "Reference", "Status", "IsExternal", "LoadBearing", "AcousticRating", "FireRating", "ThermalTransmittance" }, new[] { "IfcPlate" }));
			ret.Add(new PropertySetInfo("Pset_FireSuppressionTerminalTypeSprinkler", new[] { "SprinklerType", "Activation", "Response", "ActivationTemperature", "CoverageArea", "HasDeflector", "BulbLiquidColor", "DischargeFlowRate", "ResidualFlowingPressure", "DischargeCoefficient", "MaximumWorkingPressure", "ConnectionSize" }, new[] { "IfcFireSuppressionTerminal" }));
			ret.Add(new PropertySetInfo("Pset_SpaceCommon", new[] { "Reference", "IsExternal", "GrossPlannedArea", "NetPlannedArea", "PubliclyAccessible", "HandicapAccessible" }, new[] { "IfcSpace" }));
			ret.Add(new PropertySetInfo("Pset_FlowMeterTypeEnergyMeter", new[] { "NominalCurrent", "MaximumCurrent", "MultipleTarriff" }, new[] { "IfcFlowMeter" }));
			ret.Add(new PropertySetInfo("Pset_MedicalDeviceTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcMedicalDevice" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeToggleSwitch", new[] { "ToggleSwitchType", "SwitchUsage", "SwitchActivation" }, new[] { "IfcSwitchingDevice" }));
			ret.Add(new PropertySetInfo("Pset_BoilerTypeWater", new[] { "NominalEfficiency", "HeatOutput" }, new[] { "IfcBoiler" }));
			ret.Add(new PropertySetInfo("Pset_BoilerTypeSteam", new[] { "MaximumOutletPressure", "NominalEfficiency", "HeatOutput" }, new[] { "IfcBoiler" }));
			ret.Add(new PropertySetInfo("Pset_MaterialHygroscopic", new[] { "UpperVaporResistanceFactor", "LowerVaporResistanceFactor", "IsothermalMoistureCapacity", "VaporPermeability", "MoistureDiffusivity" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_CoveringCeiling", new[] { "Permeability", "TileLength", "TileWidth" }, new[] { "IfcCovering" }));
			ret.Add(new PropertySetInfo("Pset_ZoneCommon", new[] { "Reference", "IsExternal", "GrossPlannedArea", "NetPlannedArea", "PubliclyAccessible", "HandicapAccessible" }, new[] { "IfcZone" }));
			ret.Add(new PropertySetInfo("Pset_SlabCommon", new[] { "Reference", "Status", "AcousticRating", "FireRating", "Combustible", "SurfaceSpreadOfFlame", "ThermalTransmittance", "IsExternal", "LoadBearing", "Compartmentation", "PitchAngle" }, new[] { "IfcSlab" }));
			ret.Add(new PropertySetInfo("Pset_FanCentrifugal", new[] { "DischargePosition", "DirectionOfRotation", "Arrangement" }, new[] { "IfcFan" }));
			ret.Add(new PropertySetInfo("Pset_FlowInstrumentTypeThermometer", new[] { "ThermometerType", "DisplaySize" }, new[] { "IfcFlowInstrument" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeFireSensor", new[] { "FireSensorSetPoint", "AccuracyOfFireSensor", "TimeConstant" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_FireSuppressionTerminalTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcFireSuppressionTerminal" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeEarthLeakageCircuitBreaker", new[] { "EarthFailureDeviceType", "Sensitivity" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_OutletTypeCommon", new[] { "Reference", "Status", "IsPluggableOutlet" }, new[] { "IfcOutlet" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeHumiditySensor", new[] { "SetPointHumidity" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_AudioVisualApplianceTypeCommon", new[] { "Reference", "Status", "MediaSource", "AudioVolume" }, new[] { "IfcAudioVisualAppliance" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTrippingFunctionGCurve", new[] { "IsSelectable", "NominalCurrentAdjusted", "ExternalAdjusted", "ReleaseCurrent", "ReleaseTime", "CurrentTolerance1", "CurrentToleranceLimit1", "CurrentTolerance2", "IsCurrentTolerancePositiveOnly", "TimeTolerance1", "TimeToleranceLimit1", "TimeTolerance2", "IsTimeTolerancePositiveOnly", "ReleaseCurrentI2tStart", "ReleaseTimeI2tStart", "ReleaseCurrentI2tEnd", "ReleaseTimeI2tEnd" }, new[] { "IfcProtectiveDeviceTrippingUnit" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTrippingUnitCurrentAdjustment", new[] { "AdjustmentValueType", "AdjustmentRange", "AdjustmentRangeStepValue", "AdjustmentValues", "AdjustmentDesignation" }, new[] { "IfcProtectiveDeviceTrippingUnit" }));
			ret.Add(new PropertySetInfo("Pset_AudioVisualApplianceTypeCamera", new[] { "CameraType", "IsOutdoors", "VideoResolutionWidth", "VideoResolutionHeight", "VideoResolutionMode", "VideoCaptureInterval", "PanTiltZoomPreset", "PanHorizontal", "PanVertical", "TiltHorizontal", "TiltVertical", "Zoom" }, new[] { "IfcAudioVisualAppliance" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeShower", new[] { "ShowerType", "HasTray", "NominalLength", "NominalWidth", "NominalDepth", "Color", "ShowerHeadDescription", "DrainSize" }, new[] { "IfcSanitaryTerminal" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypePHistory", new[] { "SetPoint" }, new[] { "IfcSwitchingDevice" }));
			ret.Add(new PropertySetInfo("Pset_ControllerTypeTwoPosition", new[] { "ControlType", "Labels", "Polarity", "Value" }, new[] { "IfcController" }));
			ret.Add(new PropertySetInfo("Pset_AudioVisualAppliancePHistory", new[] { "PowerState", "MediaSource", "MediaContent", "AudioVolume" }, new[] { "IfcAudioVisualAppliance" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeUrinal", new[] { "UrinalType", "Mounting", "Color", "SpilloverLevel", "NominalLength", "NominalWidth", "NominalDepth" }, new[] { "IfcSanitaryTerminal" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeMoistureSensor", new[] { "SetPointMoisture" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_CommunicationsApplianceTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcCommunicationsAppliance" }));
			ret.Add(new PropertySetInfo("Pset_ActorCommon", new[] { "NumberOfActors", "Category", "SkillLevel" }, new[] { "IfcActor" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypePressureSensor", new[] { "SetPointPressure", "IsSwitch" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeSmokeSensor", new[] { "CoverageArea", "SetPointConcentration", "HasBuiltInAlarm" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_DamperOccurrence", new[] { "SizingMethod" }, new[] { "IfcDamper" }));
			ret.Add(new PropertySetInfo("Pset_DistributionPortTypePipe", new[] { "ConnectionType", "ConnectionSubType", "NominalDiameter", "InnerDiameter", "OuterDiameter", "Temperature", "VolumetricFlowRate", "MassFlowRate", "FlowCondition", "Velocity", "Pressure" }, new[] { "IfcDistributionPort" }));
			ret.Add(new PropertySetInfo("Pset_DistributionPortTypeDuct", new[] { "ConnectionType", "ConnectionSubType", "NominalWidth", "NominalHeight", "DryBulbTemperature", "WetBulbTemperature", "VolumetricFlowRate", "Velocity", "Pressure" }, new[] { "IfcDistributionPort" }));
			ret.Add(new PropertySetInfo("Pset_SolarDeviceTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcSolarDevice" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeMovementSensor", new[] { "MovementSensingType", "SetPointMovement" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_ControllerTypeFloating", new[] { "ControlType", "Labels", "Range", "Value", "SignalOffset", "SignalFactor", "SignalTime" }, new[] { "IfcController" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTrippingUnitTimeAdjustment", new[] { "AdjustmentValueType", "AdjustmentRange", "AdjustmentRangeStepValue", "AdjustmentValues", "AdjustmentDesignation", "CurrentForTimeDelay", "I2TApplicability" }, new[] { "IfcProtectiveDeviceTrippingUnit" }));
			ret.Add(new PropertySetInfo("Pset_AlarmPHistory", new[] { "Enabled", "Condition", "Severity", "Acknowledge", "User" }, new[] { "IfcAlarm" }));
			ret.Add(new PropertySetInfo("Pset_RailingCommon", new[] { "Reference", "Status", "Height", "Diameter", "IsExternal" }, new[] { "IfcRailing" }));
			ret.Add(new PropertySetInfo("Pset_UnitaryEquipmentTypeAirHandler", new[] { "AirHandlerConstruction", "AirHandlerFanCoilArrangement", "DualDeck" }, new[] { "IfcUnitaryEquipment" }));
			ret.Add(new PropertySetInfo("Pset_CableCarrierSegmentTypeConduitSegment", new[] { "NominalWidth", "NominalHeight", "ConduitShapeType", "IsRigid" }, new[] { "IfcCableCarrierSegment" }));
			ret.Add(new PropertySetInfo("Pset_SpaceFireSafetyRequirements", new[] { "FireRiskFactor", "FlammableStorage", "FireExit", "SprinklerProtection", "SprinklerProtectionAutomatic", "AirPressurization" }, new[] { "IfcSpace", "IfcSpatialZone", "IfcZone" }));
			ret.Add(new PropertySetInfo("Pset_ManufacturerTypeInformation", new[] { "GlobalTradeItemNumber", "ArticleNumber", "ModelReference", "ModelLabel", "Manufacturer", "ProductionYear", "AssemblyPlace" }, new[] { "IfcElement" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceBreakerUnitTypeMCB", new[] { "PowerLoss", "VoltageLevel", "NominalCurrents", "ICU60947", "ICS60947", "ICN60898", "ICS60898" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementCommon", new[] { "Reference", "Status" }, new[] { "IfcDistributionChamberElement" }));
			ret.Add(new PropertySetInfo("Pset_FireSuppressionTerminalTypeFireHydrant", new[] { "FireHydrantType", "PumperConnectionSize", "NumberOfHoseConnections", "HoseConnectionSize", "DischargeFlowRate", "FlowClass", "WaterIsPotable", "PressureRating", "BodyColor", "CapColor" }, new[] { "IfcFireSuppressionTerminal" }));
			ret.Add(new PropertySetInfo("Pset_SystemFurnitureElementTypePanel", new[] { "HasOpening", "FurniturePanelType", "NominalThickness" }, new[] { "IfcSystemFurnitureElement" }));
			ret.Add(new PropertySetInfo("Pset_LightFixtureTypeSecurityLighting", new[] { "SecurityLightingType", "FixtureHeight", "SelfTestFunction", "BackupSupplySystem", "PictogramEscapeDirection", "Addressablility" }, new[] { "IfcLightFixture" }));
			ret.Add(new PropertySetInfo("Pset_MechanicalFastenerBolt", new[] { "ThreadDiameter", "ThreadLength", "NutsCount", "WashersCount", "HeadShape", "KeyShape", "NutShape", "WasherShape" }, new[] { "IfcMechanicalFastener" }));
			ret.Add(new PropertySetInfo("Pset_VibrationIsolatorTypeCommon", new[] { "Reference", "VibrationTransmissibility", "IsolatorStaticDeflection", "IsolatorCompressibility", "Height", "MaximumSupportedWeight" }, new[] { "IfcVibrationIsolator" }));
			ret.Add(new PropertySetInfo("Pset_ShadingDevicePHistory", new[] { "TiltAngle", "Azimuth" }, new[] { "IfcShadingDevice" }));
			ret.Add(new PropertySetInfo("Pset_CompressorTypeCommon", new[] { "Reference", "Status", "PowerSource", "RefrigerantClass", "RefrigerantType", "MinimumPartLoadRatio", "MaximumPartLoadRatio", "CompressorSpeed", "NominalCapacity", "IdealCapacity", "IdealShaftPower", "HasHotGasBypass", "ImpellerDiameter" }, new[] { "IfcCompressor" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcementBarPitchOfBeam", new[] { "Description", "Reference", "StirrupBarPitch", "SpacingBarPitch" }, new[] { "IfcBeam" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcementBarPitchOfSlab", new[] { "Description", "Reference", "LongOutsideTopBarPitch", "LongInsideCenterTopBarPitch", "LongInsideEndTopBarPitch", "ShortOutsideTopBarPitch", "ShortInsideCenterTopBarPitch", "ShortInsideEndTopBarPitch", "LongOutsideLowerBarPitch", "LongInsideCenterLowerBarPitch", "LongInsideEndLowerBarPitch", "ShortOutsideLowerBarPitch", "ShortInsideCenterLowerBarPitch", "ShortInsideEndLowerBarPitch" }, new[] { "IfcSlab" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcementBarPitchOfWall", new[] { "Description", "Reference", "BarAllocationType", "VerticalBarPitch", "HorizontalBarPitch", "SpacingBarPitch" }, new[] { "IfcWall" }));
			ret.Add(new PropertySetInfo("Pset_PipeSegmentTypeCulvert", new[] { "InternalWidth", "ClearDepth" }, new[] { "IfcPipeSegment" }));
			ret.Add(new PropertySetInfo("Pset_FurnitureTypeCommon", new[] { "Description", "Style", "NominalHeight", "NominalLength", "NominalDepth", "MainColor", "IsBuiltIn" }, new[] { "IfcFurniture" }));
			ret.Add(new PropertySetInfo("Pset_AudioVisualApplianceTypeDisplay", new[] { "DisplayType", "NominalSize", "DisplayWidth", "DisplayHeight", "Brightness", "ContrastRatio", "RefreshRate", "TouchScreen", "VideoResolutionWidth", "VideoResolutionHeight", "VideoResolutionMode", "VideoScaleMode", "VideoCaptionMode", "AudioMode" }, new[] { "IfcAudioVisualAppliance" }));
			ret.Add(new PropertySetInfo("Pset_ElectricGeneratorTypeCommon", new[] { "Reference", "Status", "ElectricGeneratorEfficiency", "StartCurrentFactor", "MaximumPowerOutput" }, new[] { "IfcElectricGenerator" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTrippingUnitTypeThermal", new[] { "ThermalTrippingUnitType", "I1", "I2", "T2", "DefinedTemperature", "TemperatureFactor", "CurveDesignation" }, new[] { "IfcProtectiveDeviceTrippingUnit" }));
			ret.Add(new PropertySetInfo("Pset_MemberCommon", new[] { "Reference", "Status", "Span", "Slope", "Roll", "IsExternal", "ThermalTransmittance", "LoadBearing", "FireRating" }, new[] { "IfcMember" }));
			ret.Add(new PropertySetInfo("Pset_PipeFittingTypeJunction", new[] { "JunctionType", "JunctionLeftAngle", "JunctionLeftRadius", "JunctionRightAngle", "JunctionRightRadius" }, new[] { "IfcPipeFitting" }));
			ret.Add(new PropertySetInfo("Pset_BuildingUseAdjacent", new[] { "MarketCategory", "MarketSubCategory", "PlanningControlStatus", "NarrativeText" }, new[] { "IfcBuilding" }));
			ret.Add(new PropertySetInfo("Pset_EvaporativeCoolerTypeCommon", new[] { "Reference", "Status", "FlowArrangement", "HeatExchangeArea", "OperationTemperatureRange", "WaterRequirement", "EffectivenessTable", "AirPressureDropCurve", "WaterPressDropCurve" }, new[] { "IfcEvaporativeCooler" }));
			ret.Add(new PropertySetInfo("Pset_TransformerTypeCommon", new[] { "Reference", "Status", "PrimaryVoltage", "SecondaryVoltage", "PrimaryCurrent", "SecondaryCurrent", "PrimaryFrequency", "SecondaryFrequency", "PrimaryApparentPower", "SecondaryApparentPower", "MaximumApparentPower", "SecondaryCurrentType", "ShortCircuitVoltage", "RealImpedanceRatio", "ImaginaryImpedanceRatio", "TransformerVectorGroup", "IsNeutralPrimaryTerminalAvailable", "IsNeutralSecondaryTerminalAvailable" }, new[] { "IfcTransformer" }));
			ret.Add(new PropertySetInfo("Pset_ControllerTypeProgrammable", new[] { "ControlType", "FirmwareVersion", "SoftwareVersion", "Application" }, new[] { "IfcController" }));
			ret.Add(new PropertySetInfo("Pset_ThermalLoadAggregate", new[] { "TotalCoolingLoad", "TotalHeatingLoad", "LightingDiversity", "InfiltrationDiversitySummer", "InfiltrationDiversityWinter", "ApplianceDiversity", "LoadSafetyFactor" }, new[] { "IfcSpatialElement" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeCistern", new[] { "CisternHeight", "CisternCapacity", "IsSingleFlush", "FlushType", "FlushRate", "IsAutomaticFlush", "CisternColor" }, new[] { "IfcSanitaryTerminal" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeConductanceSensor", new[] { "SetPointConductance" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_ColumnCommon", new[] { "Reference", "Status", "Slope", "Roll", "IsExternal", "ThermalTransmittance", "LoadBearing", "FireRating" }, new[] { "IfcColumn" }));
			ret.Add(new PropertySetInfo("Pset_StructuralSurfaceMemberVaryingThickness", new[] { "Thickness1", "Location1Local", "Location1Global", "Thickness2", "Location2Local", "Location2Global", "Thickness3", "Location3Local", "Location3Global" }, new[] { "IfcStructuralSurfaceMemberVarying" }));
			ret.Add(new PropertySetInfo("Pset_MaterialSteel", new[] { "YieldStress", "UltimateStress", "UltimateStrain", "HardeningModule", "ProportionalStress", "PlasticStrain", "Relaxations" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeIonConcentrationSensor", new[] { "SubstanceDetected", "SetPointConcentration" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_MaterialWater", new[] { "IsPotable", "Hardness", "AlkalinityConcentration", "AcidityConcentration", "ImpuritiesContent", "DissolvedSolidsContent", "PHLevel" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_DamperPHistory", new[] { "AirFlowRate", "Leakage", "PressureDrop", "BladePositionAngle", "DamperPosition", "PressureLossCoefficient" }, new[] { "IfcDamper" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeRoofDrain", new[] { "NominalBodyLength", "NominalBodyWidth", "NominalBodyDepth", "OutletConnectionSize", "CoverLength", "CoverWidth" }, new[] { "IfcWasteTerminal" }));
			ret.Add(new PropertySetInfo("Pset_Warranty", new[] { "WarrantyIdentifier", "WarrantyStartDate", "WarrantyEndDate", "IsExtendedWarranty", "WarrantyPeriod", "PointOfContact", "WarrantyContent", "Exclusions" }, new[] { "IfcElement" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeLightSensor", new[] { "SetPointIlluminance" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_MaterialConcrete", new[] { "CompressiveStrength", "MaxAggregateSize", "AdmixturesDescription", "Workability", "WaterImpermeability", "ProtectivePoreRatio" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_SpaceHeaterTypeConvector", new[] { "ConvectorType" }, new[] { "IfcSpaceHeater" }));
			ret.Add(new PropertySetInfo("Pset_FilterPHistory", new[] { "CountedEfficiency", "WeightedEfficiency", "ParticleMassHolding" }, new[] { "IfcFilter" }));
			ret.Add(new PropertySetInfo("Pset_DistributionSystemTypeVentilation", new[] { "DesignName", "DuctSizingMethod", "PressureClass", "LeakageClass", "FrictionLoss", "ScrapFactor", "DuctSealant", "MaximumVelocity", "AspectRatio", "MinimumHeight", "MinimumWidth" }, new[] { "IfcDistributionSystem" }));
			ret.Add(new PropertySetInfo("Pset_ActuatorTypeElectricActuator", new[] { "ActuatorInputPower", "ElectricActuatorType" }, new[] { "IfcActuator" }));
			ret.Add(new PropertySetInfo("Pset_AirToAirHeatRecoveryTypeCommon", new[] { "Reference", "Status", "HeatTransferTypeEnum", "HasDefrost", "OperationalTemperatureRange", "PrimaryAirflowRateRange", "SecondaryAirflowRateRange" }, new[] { "IfcAirToAirHeatRecovery" }));
			ret.Add(new PropertySetInfo("Pset_DuctSilencerPHistory", new[] { "AirFlowRate", "AirPressureDropCurve" }, new[] { "IfcDuctSilencer" }));
			ret.Add(new PropertySetInfo("Pset_CurtainWallCommon", new[] { "Reference", "Status", "AcousticRating", "FireRating", "Combustible", "SurfaceSpreadOfFlame", "ThermalTransmittance", "IsExternal" }, new[] { "IfcCurtainWall" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeContactSensor", new[] { "SetPointContact" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_ReinforcementBarPitchOfContinuousFooting", new[] { "Description", "Reference", "CrossingUpperBarPitch", "CrossingLowerBarPitch" }, new[] { "IfcFooting" }));
			ret.Add(new PropertySetInfo("Pset_UnitaryControlElementPHistory", new[] { "Temperature", "Mode", "Fan", "SetPoint" }, new[] { "IfcUnitaryControlElement" }));
			ret.Add(new PropertySetInfo("Pset_TankTypePreformed", new[] { "PatternType", "EndShapeType", "FirstCurvatureRadius", "SecondCurvatureRadius" }, new[] { "IfcTank" }));
			ret.Add(new PropertySetInfo("Pset_ControllerTypeMultiPosition", new[] { "ControlType", "Labels", "Range", "Value" }, new[] { "IfcController" }));
			ret.Add(new PropertySetInfo("Pset_DistributionPortPHistoryPipe", new[] { "Temperature", "Pressure", "Flowrate" }, new[] { "IfcDistributionPort" }));
			ret.Add(new PropertySetInfo("Pset_DistributionPortPHistoryDuct", new[] { "Temperature", "WetBulbTemperature", "VolumetricFlowRate", "MassFlowRate", "FlowCondition", "Velocity", "Pressure" }, new[] { "IfcDistributionPort" }));
			ret.Add(new PropertySetInfo("Pset_PipeSegmentPHistory", new[] { "LeakageCurve", "FluidFlowLeakage" }, new[] { "IfcPipeSegment" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypePressureReducing", new[] { "UpstreamPressure", "DownstreamPressure" }, new[] { "IfcValve" }));
			ret.Add(new PropertySetInfo("Pset_PumpPHistory", new[] { "MechanicalEfficiency", "OverallEfficiency", "PressureRise", "RotationSpeed", "Flowrate", "Power" }, new[] { "IfcPump" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeCommon", new[] { "Reference" }, new[] { "IfcSanitaryTerminal" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeWasteTrap", new[] { "WasteTrapType", "OutletConnectionSize", "InletConnectionSize" }, new[] { "IfcWasteTerminal" }));
			ret.Add(new PropertySetInfo("Pset_MaterialThermal", new[] { "SpecificHeatCapacity", "BoilingPoint", "FreezingPoint", "ThermalConductivity" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_FilterTypeCommon", new[] { "Reference", "Status", "Weight", "InitialResistance", "FinalResistance", "OperationTemperatureRange", "FlowRateRange", "NominalFilterFaceVelocity", "NominalMediaSurfaceVelocity", "NominalPressureDrop", "NominalFlowrate", "NominalParticleGeometricMeanDiameter", "NominalParticleGeometricStandardDeviation" }, new[] { "IfcFilter" }));
			ret.Add(new PropertySetInfo("Pset_ProjectOrderWorkOrder", new[] { "ProductDescription", "WorkTypeRequested", "ContractualType", "IfNotAccomplished" }, new[] { "IfcProjectOrder" }));
			ret.Add(new PropertySetInfo("Pset_LampTypeCommon", new[] { "Reference", "Status", "ContributedLuminousFlux", "LightEmitterNominalPower", "LampMaintenanceFactor", "LampBallastType", "LampCompensationType", "ColorAppearance", "Spectrum", "ColorTemperature", "ColorRenderingIndex" }, new[] { "IfcLamp" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeInspectionPit", new[] { "Length", "Width", "Depth" }, new[] { "IfcDistributionChamberElement" }));
			ret.Add(new PropertySetInfo("Pset_CoveringFlooring", new[] { "HasNonSkidSurface", "HasAntiStaticSurface" }, new[] { "IfcCovering" }));
			ret.Add(new PropertySetInfo("Pset_CondenserTypeCommon", new[] { "Reference", "RefrigerantClass", "RefrigerantMaterial", "ExternalSurfaceArea", "InternalSurfaceArea", "InternalRefrigerantVolume", "InternalWaterVolume", "NominalHeatTransferArea", "NominalHeatTransferCoefficient" }, new[] { "IfcCondenser" }));
			ret.Add(new PropertySetInfo("Pset_ElectricDistributionBoardTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcElectricDistributionBoard" }));
			ret.Add(new PropertySetInfo("Pset_ProjectOrderChangeOrder", new[] { "ReasonForChange", "BudgetSource" }, new[] { "IfcProjectOrder" }));
			ret.Add(new PropertySetInfo("Pset_TubeBundleTypeCommon", new[] { "Reference", "Status", "NumberOfRows", "StaggeredRowSpacing", "InLineRowSpacing", "NumberOfCircuits", "FoulingFactor", "ThermalConductivity", "Length", "Volume", "NominalDiameter", "OutsideDiameter", "InsideDiameter", "HorizontalSpacing", "VerticalSpacing", "HasTurbulator" }, new[] { "IfcTubeBundle" }));
			ret.Add(new PropertySetInfo("Pset_CoveringCommon", new[] { "Reference", "Status", "FireRating", "AcousticRating", "FlammabilityRating", "FragilityRating", "SurfaceSpreadOfFlame", "Combustible", "IsExternal", "ThermalTransmittance", "Finish" }, new[] { "IfcCovering" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeTrench", new[] { "Width", "Depth", "InvertLevel" }, new[] { "IfcDistributionChamberElement" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTrippingFunctionSCurve", new[] { "IsSelectable", "NominalCurrentAdjusted", "ReleaseCurrent", "ReleaseTime", "CurrentTolerance1", "CurrentToleranceLimit1", "CurrentTolerance2", "IsCurrentTolerancePositiveOnly", "TimeTolerance1", "TimeToleranceLimit1", "TimeTolerance2", "IsTimeTolerancePositiveOnly", "ReleaseCurrentI2tStart", "ReleaseTimeI2tStart", "ReleaseCurrentI2tEnd", "ReleaseTimeI2tEnd", "IsOffWhenLfunctionOn" }, new[] { "IfcProtectiveDeviceTrippingUnit" }));
			ret.Add(new PropertySetInfo("Pset_MaterialWoodBasedBeam", new[] { "ApplicableStructuralDesignMethod", "InPlane", "InPlaneNegative", "OutOfPlane" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_ElementComponentCommon", new[] { "Reference", "Status", "DeliveryType", "CorrosionTreatment" }, new[] { "IfcElementComponent" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypePHSensor", new[] { "SetPointPH" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_FlowInstrumentTypePressureGauge", new[] { "PressureGaugeType", "DisplaySize" }, new[] { "IfcFlowInstrument" }));
			ret.Add(new PropertySetInfo("Pset_FlowMeterTypeWaterMeter", new[] { "Type", "ConnectionSize", "MaximumFlowRate", "MaximumPressureLoss", "BackflowPreventerType" }, new[] { "IfcFlowMeter" }));
			ret.Add(new PropertySetInfo("Pset_TransportElementCommon", new[] { "Reference", "Status", "CapacityPeople", "CapacityWeight", "FireExit" }, new[] { "IfcTransportElement" }));
			ret.Add(new PropertySetInfo("Pset_TubeBundleTypeFinned", new[] { "Spacing", "Thickness", "ThermalConductivity", "Length", "Height", "Diameter", "FinCorrugatedType", "HasCoating" }, new[] { "IfcTubeBundle" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTrippingCurve", new[] { "TrippingCurveType", "TrippingCurve" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_ChillerTypeCommon", new[] { "Reference", "Status", "NominalCapacity", "NominalEfficiency", "NominalCondensingTemperature", "NominalEvaporatingTemperature", "NominalHeatRejectionRate", "NominalPowerConsumption", "CapacityCurve", "CoefficientOfPerformanceCurve", "FullLoadRatioCurve" }, new[] { "IfcChiller" }));
			ret.Add(new PropertySetInfo("Pset_MaterialCommon", new[] { "MolecularWeight", "Porosity", "MassDensity" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeSoundSensor", new[] { "SetPointSound" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_SoundGeneration", new[] { "SoundCurve" }, new[] { "IfcDistributionFlowElement" }));
			ret.Add(new PropertySetInfo("Pset_TankOccurrence", new[] { "TankComposition", "HasLadder", "HasVisualIndicator" }, new[] { "IfcTank" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryFixingSocket", new[] { "FixingSocketTypeReference", "FixingSocketHeight", "FixingSocketThreadDiameter", "FixingSocketThreadLength" }, new[] { "IfcDiscreteAccessory" }));
			ret.Add(new PropertySetInfo("Pset_CableCarrierSegmentTypeCableLadderSegment", new[] { "NominalWidth", "NominalHeight", "LadderConfiguration" }, new[] { "IfcCableCarrierSegment" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeResidualCurrentSwitch", new[] { "Sensitivity" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_EvaporatorPHistory", new[] { "HeatRejectionRate", "ExteriorHeatTransferCoefficient", "InteriorHeatTransferCoefficient", "RefrigerantFoulingResistance", "EvaporatingTemperature", "LogarithmicMeanTemperatureDifference", "UAcurves", "CompressorEvaporatorHeatGain", "CompressorEvaporatorPressureDrop", "EvaporatorMeanVoidFraction", "WaterFoulingResistance" }, new[] { "IfcEvaporator" }));
			ret.Add(new PropertySetInfo("Pset_MaterialCombustion", new[] { "SpecificHeatCapacity", "N20Content", "COContent", "CO2Content" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_DamperTypeControlDamper", new[] { "TorqueRange", "ControlDamperOperation" }, new[] { "IfcDamper" }));
			ret.Add(new PropertySetInfo("Pset_CondenserPHistory", new[] { "HeatRejectionRate", "ExteriorHeatTransferCoefficient", "InteriorHeatTransferCoefficient", "RefrigerantFoulingResistance", "CondensingTemperature", "LogarithmicMeanTemperatureDifference", "UAcurves", "CompressorCondenserHeatGain", "CompressorCondenserPressureDrop", "CondenserMeanVoidFraction", "WaterFoulingResistance" }, new[] { "IfcCondenser" }));
			ret.Add(new PropertySetInfo("Pset_WallCommon", new[] { "Reference", "Status", "AcousticRating", "FireRating", "Combustible", "SurfaceSpreadOfFlame", "ThermalTransmittance", "IsExternal", "ExtendToStructure", "LoadBearing", "Compartmentation" }, new[] { "IfcWall" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeAirRelease", new[] { "IsAutomatic" }, new[] { "IfcValve" }));
			ret.Add(new PropertySetInfo("Pset_AirTerminalTypeCommon", new[] { "Reference", "Status", "Shape", "FaceType", "SlotWidth", "SlotLength", "NumberOfSlots", "FlowPattern", "AirFlowrateRange", "TemperatureRange", "DischargeDirection", "ThrowLength", "AirDiffusionPerformanceIndex", "FinishType", "FinishColor", "MountingType", "CoreType", "CoreSetHorizontal", "CoreSetVertical", "HasIntegralControl", "FlowControlType", "HasSoundAttenuator", "HasThermalInsulation", "NeckArea", "EffectiveArea", "AirFlowrateVersusFlowControlElement" }, new[] { "IfcAirTerminal" }));
			ret.Add(new PropertySetInfo("Pset_BuildingStoreyCommon", new[] { "Reference", "EntranceLevel", "AboveGround", "SprinklerProtection", "SprinklerProtectionAutomatic", "LoadBearingCapacity", "GrossPlannedArea", "NetPlannedArea" }, new[] { "IfcBuildingStorey" }));
			ret.Add(new PropertySetInfo("Pset_BuildingElementProxyCommon", new[] { "Reference", "Status", "IsExternal", "ThermalTransmittance", "LoadBearing", "FireRating" }, new[] { "IfcBuildingElementProxy" }));
			ret.Add(new PropertySetInfo("Pset_SensorPHistory", new[] { "Value", "Direction", "Quality", "Status" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_ProjectOrderMoveOrder", new[] { "SpecialInstructions" }, new[] { "IfcProjectOrder" }));
			ret.Add(new PropertySetInfo("Pset_CableCarrierSegmentTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcCableCarrierSegment" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeTemperatureSensor", new[] { "TemperatureSensorType", "SetPointTemperature" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_ControllerPHistory", new[] { "Value", "Quality", "Status" }, new[] { "IfcController" }));
			ret.Add(new PropertySetInfo("Pset_WindowCommon", new[] { "Reference", "Status", "AcousticRating", "FireRating", "SecurityRating", "IsExternal", "Infiltration", "ThermalTransmittance", "GlazingAreaFraction", "HasSillExternal", "HasSillInternal", "HasDrive", "SmokeStop", "FireExit" }, new[] { "IfcWindow" }));
			ret.Add(new PropertySetInfo("Pset_PumpTypeCommon", new[] { "Reference", "Status", "FlowRateRange", "FlowResistanceRange", "ConnectionSize", "TemperatureRange", "NetPositiveSuctionHead", "NominalRotationSpeed" }, new[] { "IfcPump" }));
			ret.Add(new PropertySetInfo("Pset_SystemFurnitureElementTypeWorkSurface", new[] { "UsePurpose", "SupportType", "HangingHeight", "NominalThickness", "ShapeDescription" }, new[] { "IfcSystemFurnitureElement" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeMomentarySwitch", new[] { "MomentaryType" }, new[] { "IfcSwitchingDevice" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryDiagonalTrussConnector", new[] { "DiagonalTrussHeight", "DiagonalTrussLength", "DiagonalTrussCrossBarSpacing", "DiagonalTrussBaseBarDiameter", "DiagonalTrussSecondaryBarDiameter", "DiagonalTrussCrossBarDiameter" }, new[] { "IfcDiscreteAccessory" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeIsolating", new[] { "IsNormallyOpen", "IsolatingPurpose" }, new[] { "IfcValve" }));
			ret.Add(new PropertySetInfo("Pset_TankTypePressureVessel", new[] { "ChargePressure", "PressureRegulatorSetting", "ReliefValveSetting" }, new[] { "IfcTank" }));
			ret.Add(new PropertySetInfo("Pset_SpaceThermalDesign", new[] { "CoolingDesignAirflow", "HeatingDesignAirflow", "TotalSensibleHeatGain", "TotalHeatGain", "TotalHeatLoss", "CoolingDryBulb", "CoolingRelativeHumidity", "HeatingDryBulb", "HeatingRelativeHumidity", "VentilationAirFlowrate", "ExhaustAirFlowrate", "CeilingRAPlenum", "BoundaryAreaHeatLoss" }, new[] { "IfcSpace" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeHeatSensor", new[] { "CoverageArea", "SetPointTemperature", "RateOfTemperatureRise" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_AnnotationContourLine", new[] { "ContourValue" }, new[] { "IfcAnnotation" }));
			ret.Add(new PropertySetInfo("Pset_AirTerminalBoxPHistory", new[] { "DamperPosition", "AtmosphericPressure", "Sound", "AirflowCurve" }, new[] { "IfcAirTerminalBox" }));
			ret.Add(new PropertySetInfo("Pset_MaterialEnergy", new[] { "ViscosityTemperatureDerivative", "MoistureCapacityThermalGradient", "ThermalConductivityTemperatureDerivative", "SpecificHeatTemperatureDerivative", "VisibleRefractionIndex", "SolarRefractionIndex", "GasPressure" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_CableSegmentTypeConductorSegment", new[] { "CrossSectionalArea", "Function", "Material", "Construction", "Shape" }, new[] { "IfcCableSegment" }));
			ret.Add(new PropertySetInfo("Pset_CoilTypeHydronic", new[] { "FluidPressureRange", "CoilCoolant", "CoilConnectionDirection", "CoilFluidArrangement", "CoilFaceArea", "HeatExchangeSurfaceArea", "PrimarySurfaceArea", "SecondarySurfaceArea", "Fluid", "TotalUACurves", "WaterPressureDropCurve", "BypassFactor", "SensibleHeatRatio", "WetCoilFraction" }, new[] { "IfcCoil" }));
			ret.Add(new PropertySetInfo("Pset_FlowMeterTypeCommon", new[] { "Reference", "Status", "ReadOutType", "RemoteReading" }, new[] { "IfcFlowMeter" }));
			ret.Add(new PropertySetInfo("Pset_ElectricDistributionBoardOccurrence", new[] { "IsMain", "IsSkilledOperator" }, new[] { "IfcElectricDistributionBoard" }));
			ret.Add(new PropertySetInfo("Pset_FlowInstrumentPHistory", new[] { "Value", "Quality", "Status" }, new[] { "IfcFlowInstrument" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeWasteDisposalUnit", new[] { "DrainConnectionSize", "OutletConnectionSize", "NominalDepth" }, new[] { "IfcWasteTerminal" }));
			ret.Add(new PropertySetInfo("Pset_MaterialOptical", new[] { "VisibleTransmittance", "SolarTransmittance", "ThermalIrTransmittance", "ThermalIrEmissivityBack", "ThermalIrEmissivityFront", "VisibleReflectanceBack", "VisibleReflectanceFront", "SolarReflectanceBack", "SolarReflectanceFront" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_PipeFittingOccurrence", new[] { "InteriorRoughnessCoefficient", "Color" }, new[] { "IfcPipeFitting" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeCircuitBreaker", new[] { "PerformanceClasses", "VoltageLevel", "ICU60947", "ICS60947", "ICW60947", "ICM60947" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_AudioVisualApplianceTypeAmplifier", new[] { "AmplifierType", "AudioAmplification", "AudioMode" }, new[] { "IfcAudioVisualAppliance" }));
			ret.Add(new PropertySetInfo("Pset_DuctFittingPHistory", new[] { "LossCoefficient", "AtmosphericPressure", "AirFlowLeakage" }, new[] { "IfcDuctFitting" }));
			ret.Add(new PropertySetInfo("Pset_FlowInstrumentTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcFlowInstrument" }));
			ret.Add(new PropertySetInfo("Pset_DuctSilencerTypeCommon", new[] { "Reference", "Status", "HydraulicDiameter", "Length", "Weight", "AirFlowrateRange", "WorkingPressureRange", "TemperatureRange", "HasExteriorInsulation" }, new[] { "IfcDuctSilencer" }));
			ret.Add(new PropertySetInfo("Pset_ControllerTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcController" }));
			ret.Add(new PropertySetInfo("Pset_ActuatorTypeHydraulicActuator", new[] { "InputPressure", "InputFlowrate" }, new[] { "IfcActuator" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceBreakerUnitIPICurve", new[] { "VoltageLevel", "NominalCurrent", "BreakerUnitIPICurve" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_ProjectOrderPurchaseOrder", new[] { "IsFOB", "ShipMethod" }, new[] { "IfcProjectOrder" }));
			ret.Add(new PropertySetInfo("Pset_FlowMeterTypeOilMeter", new[] { "ConnectionSize", "MaximumFlowRate" }, new[] { "IfcFlowMeter" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTrippingUnitTypeResidualCurrent", new[] { "TrippingUnitReleaseCurrent" }, new[] { "IfcProtectiveDeviceTrippingUnit" }));
			ret.Add(new PropertySetInfo("Pset_SystemFurnitureElementTypeCommon", new[] { "IsUsed", "GroupCode", "NominalWidth", "NominalHeight", "Finishing" }, new[] { "IfcSystemFurnitureElement" }));
			ret.Add(new PropertySetInfo("Pset_SpaceHeaterTypeRadiator", new[] { "RadiatorType", "TubingLength", "WaterContent" }, new[] { "IfcSpaceHeater" }));
			ret.Add(new PropertySetInfo("Pset_ElectricApplianceTypeDishwasher", new[] { "DishwasherType" }, new[] { "IfcElectricAppliance" }));
			ret.Add(new PropertySetInfo("Pset_DuctSegmentTypeCommon", new[] { "Reference", "Status", "Shape", "WorkingPressure", "PressureRange", "TemperatureRange", "LongitudinalSeam", "NominalDiameterOrWidth", "NominalHeight", "Reinforcement", "ReinforcementSpacing" }, new[] { "IfcDuctSegment" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeMeterChamber", new[] { "ChamberLengthOrRadius", "ChamberWidth", "WallMaterial", "WallThickness", "BaseMaterial", "BaseThickness", "AccessCoverMaterial" }, new[] { "IfcDistributionChamberElement" }));
			ret.Add(new PropertySetInfo("Pset_ServiceLifeFactors", new[] { "QualityOfComponents", "DesignLevel", "WorkExecutionLevel", "IndoorEnvironment", "OutdoorEnvironment", "InUseConditions", "MaintenanceLevel" }, new[] { "IfcSystem" }));
			ret.Add(new PropertySetInfo("Pset_TankTypeCommon", new[] { "Reference", "Status", "AccessType", "StorageType", "NominalLengthOrDiameter", "NominalWidthOrDiameter", "NominalDepth", "NominalCapacity", "EffectiveCapacity", "OperatingWeight", "PatternType", "EndShapeType", "FirstCurvatureRadius", "SecondCurvatureRadius", "NumberOfSections" }, new[] { "IfcTank" }));
			ret.Add(new PropertySetInfo("Pset_MaterialWoodBasedPanel", new[] { "ApplicableStructuralDesignMethod", "InPlane", "OutOfPlane", "OutOfPlaneNegative" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryEdgeFixingPlate", new[] { "EdgeFixingPlateLength", "EdgeFixingPlateThickness", "EdgeFixingPlateFlangeWidthInPlaneZ", "EdgeFixingPlateFlangeWidthInPlaneX" }, new[] { "IfcDiscreteAccessory" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeResidualCurrentCircuitBreaker", new[] { "Sensitivity" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeFloorWaste", new[] { "NominalBodyLength", "NominalBodyWidth", "NominalBodyDepth", "OutletConnectionSize", "CoverLength", "CoverWidth" }, new[] { "IfcWasteTerminal" }));
			ret.Add(new PropertySetInfo("Pset_FireSuppressionTerminalTypeHoseReel", new[] { "HoseReelType", "HoseReelMountingType", "InletConnectionSize", "HoseDiameter", "HoseLength", "HoseNozzleType", "ClassOfService", "ClassificationAuthority" }, new[] { "IfcFireSuppressionTerminal" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeContactor", new[] { "ContactorType" }, new[] { "IfcSwitchingDevice" }));
			ret.Add(new PropertySetInfo("Pset_DistributionPortCommon", new[] { "PortNumber", "ColorCode" }, new[] { "IfcDistributionPort" }));
			ret.Add(new PropertySetInfo("Pset_DoorWindowGlazingType", new[] { "GlassLayers", "GlassThickness1", "GlassThickness2", "GlassThickness3", "FillGas", "GlassColor", "IsTempered", "IsLaminated", "IsCoated", "IsWired", "VisibleLightReflectance", "VisibleLightTransmittance", "SolarAbsorption", "SolarReflectance", "SolarTransmittance", "SolarHeatGainTransmittance", "ShadingCoefficient", "ThermalTransmittanceSummer", "ThermalTransmittanceWinter" }, new[] { "IfcDoor", "IfcWindow" }));
			ret.Add(new PropertySetInfo("Pset_ActuatorTypeCommon", new[] { "Reference", "Status", "FailPosition", "ManualOverride", "Application" }, new[] { "IfcActuator" }));
			ret.Add(new PropertySetInfo("Pset_SpaceThermalPHistory", new[] { "CoolingAirFlowRate", "HeatingAirFlowRate", "VentilationAirFlowRate", "ExhaustAirFlowRate", "SpaceTemperature", "SpaceRelativeHumidity" }, new[] { "IfcSpace" }));
			ret.Add(new PropertySetInfo("Pset_JunctionBoxTypeCommon", new[] { "Reference", "Status", "NumberOfGangs", "ClearDepth", "ShapeType", "PlacingType", "MountingType", "IsExternal", "IP_Code" }, new[] { "IfcJunctionBox" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeSelectorSwitch", new[] { "SelectorType", "SwitchUsage", "SwitchActivation" }, new[] { "IfcSwitchingDevice" }));
			ret.Add(new PropertySetInfo("Pset_PrecastConcreteElementGeneral", new[] { "TypeDesignator", "CornerChamfer", "ManufacturingToleranceClass", "FormStrippingStrength", "LiftingStrength", "ReleaseStrength", "MinimumAllowableSupportLength", "InitialTension", "TendonRelaxation", "TransportationStrength", "SupportDuringTransportDescription", "SupportDuringTransportDocReference", "HollowCorePlugging", "CamberAtMidspan", "BatterAtStart", "BatterAtEnd", "Twisting", "Shortening", "PieceMark", "DesignLocationNumber" }, new[] { "IfcBuildingElement" }));
			ret.Add(new PropertySetInfo("Pset_BuildingCommon", new[] { "Reference", "BuildingID", "IsPermanentID", "ConstructionMethod", "FireProtectionClass", "SprinklerProtection", "SprinklerProtectionAutomatic", "OccupancyType", "GrossPlannedArea", "NetPlannedArea", "NumberOfStoreys", "YearOfConstruction", "YearOfLastRefurbishment", "IsLandmarked" }, new[] { "IfcBuilding" }));
			ret.Add(new PropertySetInfo("Pset_Condition", new[] { "AssessmentDate", "AssessmentCondition", "AssessmentDescription" }, new[] { "IfcElement" }));
			ret.Add(new PropertySetInfo("Pset_ElectricTimeControlTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcElectricTimeControl" }));
			ret.Add(new PropertySetInfo("Pset_UtilityConsumptionPHistory", new[] { "Heat", "Electricity", "Water", "Fuel", "Steam" }, new[] { "IfcBuilding" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceOccurrence", new[] { "PoleUsage", "LongTimeFunction", "ShortTimeFunction", "ShortTimei2tFunction", "GroundFaultFunction", "GroundFaulti2tFunction", "LongTimeCurrentSetValue", "ShortTimeCurrentSetValue", "InstantaneousCurrentSetValue", "GroundFaultCurrentSetValue", "LongTimeDelay", "ShortTimeTrippingTime", "InstantaneousTrippingTime", "GroundFaultTrippingTime" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_SpaceParking", new[] { "ParkingUse", "ParkingUnits", "IsAisle", "IsOneWay" }, new[] { "IfcSpace" }));
			ret.Add(new PropertySetInfo("Pset_TankTypeSectional", new[] { "NumberOfSections", "SectionLength", "SectionWidth" }, new[] { "IfcTank" }));
			ret.Add(new PropertySetInfo("Pset_UnitaryControlElementTypeIndicatorPanel", new[] { "Application" }, new[] { "IfcUnitaryControlElement" }));
			ret.Add(new PropertySetInfo("Pset_DistributionPortTypeCable", new[] { "ConnectionType", "ConnectionSubtype", "ConnectionGender", "ConductorFunction", "CurrentContent3rdHarmonic", "Current", "Voltage", "Power", "Protocols" }, new[] { "IfcDistributionPort" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_AirToAirHeatRecoveryPHistory", new[] { "SensibleEffectiveness", "TotalEffectiveness", "TemperatureEffectiveness", "DefrostTemperatureEffectiveness", "HumidityEffectiveness", "SensibleHeatTransferRate", "LatentHeatTransferRate", "TotalHeatTransferRate", "SensibleEffectivenessTable", "TotalEffectivenessTable", "AirPressureDropCurves" }, new[] { "IfcAirToAirHeatRecovery" }));
			ret.Add(new PropertySetInfo("Pset_ConstructionResource", new[] { "ScheduleWork", "ActualWork", "RemainingWork", "ScheduleCost", "ActualCost", "RemainingCost", "ScheduleCompletion", "ActualCompletion" }, new[] { "IfcConstructionResource" }));
			ret.Add(new PropertySetInfo("Pset_HeatExchangerTypeCommon", new[] { "Reference", "Status", "Arrangement" }, new[] { "IfcHeatExchanger" }));
			ret.Add(new PropertySetInfo("Pset_ChillerPHistory", new[] { "Capacity", "EnergyEfficiencyRatio", "CoefficientOfPerformance" }, new[] { "IfcChiller" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeValveChamber", new[] { "ChamberLengthOrRadius", "ChamberWidth", "WallMaterial", "WallThickness", "BaseMaterial", "BaseThickness", "AccessCoverMaterial" }, new[] { "IfcDistributionChamberElement" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeDimmerSwitch", new[] { "DimmerType" }, new[] { "IfcSwitchingDevice" }));
			ret.Add(new PropertySetInfo("Pset_CableFittingTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcCableFitting" }));
			ret.Add(new PropertySetInfo("Pset_ActuatorPHistory", new[] { "Position", "Quality", "Status" }, new[] { "IfcActuator" }));
			ret.Add(new PropertySetInfo("Pset_Asset", new[] { "AssetAccountingType", "AssetTaxType", "AssetInsuranceType" }, new[] { "IfcAsset" }));
			ret.Add(new PropertySetInfo("Pset_SpaceHeaterPHistory", new[] { "FractionRadiantHeatTransfer", "FractionConvectiveHeatTransfer", "Effectiveness", "SurfaceTemperature", "SpaceAirTemperature", "SpaceMeanRadiantTemperature", "AuxiliaryEnergySourceConsumption", "UACurve", "OutputCapacityCurve", "AirResistanceCurve", "Exponent", "HeatOutputRate" }, new[] { "IfcSpaceHeater" }));
			ret.Add(new PropertySetInfo("Pset_FilterTypeWaterFilter", new[] { "WaterFilterType" }, new[] { "IfcFilter" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeStarter", new[] { "StarterType" }, new[] { "IfcSwitchingDevice" }));
			ret.Add(new PropertySetInfo("Pset_DistributionSystemTypeElectrical", new[] { "ElectricalSystemType", "ElectricalSystemCategory", "Diversity", "NumberOfLiveConductors", "MaximumAllowedVoltageDrop", "NetImpedance" }, new[] { "IfcDistributionSystem" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcWasteTerminal" }));
			ret.Add(new PropertySetInfo("Pset_AudioVisualApplianceTypeTuner", new[] { "TunerType", "TunerMode", "TunerChannel", "TunerFrequency" }, new[] { "IfcAudioVisualAppliance" }));
			ret.Add(new PropertySetInfo("Pset_CooledBeamTypeActive", new[] { "AirFlowConfiguration", "AirflowRateRange", "SupplyAirConnectionType", "ConnectionSize" }, new[] { "IfcCooledBeam" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryColumnShoe", new[] { "ColumnShoeBasePlateThickness", "ColumnShoeBasePlateWidth", "ColumnShoeBasePlateDepth", "ColumnShoeCasingHeight", "ColumnShoeCasingWidth", "ColumnShoeCasingDepth" }, new[] { "IfcDiscreteAccessory" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_MaterialFuel", new[] { "CombustionTemperature", "CarbonContent", "LowerHeatingValue", "HigherHeatingValue" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_MaterialWood", new[] { "Species", "StrengthGrade", "AppearanceGrade", "Layup", "Layers", "Plies", "MoistureContent", "DimensionalChangeCoefficient", "ThicknessSwelling" }, new[] { "IfcMaterial" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTrippingUnitTypeCommon", new[] { "Reference", "Status", "Standard", "UseInDiscrimination", "AtexVerified", "OldDevice", "LimitingTerminalSize" }, new[] { "IfcProtectiveDeviceTrippingUnit" }));
			ret.Add(new PropertySetInfo("Pset_StairCommon", new[] { "Reference", "Status", "NumberOfRiser", "NumberOfTreads", "RiserHeight", "TreadLength", "NosingLength", "WalkingLineOffset", "TreadLengthAtOffset", "TreadLengthAtInnerSide", "WaistThickness", "RequiredHeadroom", "IsExternal", "FireRating", "FireExit", "HandicapAccessible", "HasNonSkidSurface" }, new[] { "IfcStair" }));
			ret.Add(new PropertySetInfo("Pset_DuctSegmentPHistory", new[] { "LossCoefficient", "AtmosphericPressure", "LeakageCurve", "FluidFlowLeakage" }, new[] { "IfcDuctSegment" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTrippingUnitTypeElectroMagnetic", new[] { "ElectroMagneticTrippingUnitType", "I1", "I2", "T2", "DefinedTemperature", "TemperatureFactor", "I4", "I5", "T5", "CurveDesignation" }, new[] { "IfcProtectiveDeviceTrippingUnit" }));
			ret.Add(new PropertySetInfo("Pset_AnnotationSurveyArea", new[] { "AcquisitionMethod", "AccuracyQualityObtained", "AccuracyQualityExpected" }, new[] { "IfcAnnotation" }));
			ret.Add(new PropertySetInfo("Pset_CableCarrierFittingTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcCableCarrierFitting" }));
			ret.Add(new PropertySetInfo("Pset_ElectricFlowStorageDeviceTypeCommon", new[] { "Reference", "Status", "NominalSupplyVoltage", "NominalSupplyVoltageOffset", "NominalFrequency", "ConnectedConductorFunction", "ShortCircuit3PoleMaximumState", "ShortCircuit3PolePowerFactorMaximumState", "ShortCircuit2PoleMinimumState", "ShortCircuit2PolePowerFactorMinimumState", "ShortCircuit1PoleMaximumState", "ShortCircuit1PolePowerFactorMaximumState", "ShortCircuit1PoleMinimumState", "ShortCircuit1PolePowerFactorMinimumState", "EarthFault1PoleMaximumState", "EarthFault1PolePowerFactorMaximumState", "EarthFault1PoleMinimumState", "EarthFault1PolePowerFactorMinimumState" }, new[] { "IfcElectricFlowStorageDevice" }));
			ret.Add(new PropertySetInfo("Pset_ElectricalDeviceCommon", new[] { "RatedCurrent", "RatedVoltage", "NominalFrequencyRange", "PowerFactor", "ConductorFunction", "NumberOfPoles", "HasProtectiveEarth", "IP_Code", "InsulationStandardClass" }, new[] { "IfcDistributionElement" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeFlowSensor", new[] { "SetPointFlow" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_BoilerPHistory", new[] { "EnergySourceConsumption", "OperationalEfficiency", "CombustionEfficiency", "WorkingPressure", "CombustionTemperature", "PartLoadRatio", "Load", "PrimaryEnergyConsumption", "AuxiliaryEnergyConsumption" }, new[] { "IfcBoiler" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeSink", new[] { "SinkType", "Mounting", "NominalLength", "NominalWidth", "NominalDepth", "Color", "DrainSize", "MountingOffset" }, new[] { "IfcSanitaryTerminal" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeBath", new[] { "BathType", "NominalLength", "NominalWidth", "NominalDepth", "Color", "DrainSize", "HasGrabHandles" }, new[] { "IfcSanitaryTerminal" }));
			ret.Add(new PropertySetInfo("Pset_SpaceCoveringRequirements", new[] { "FloorCovering", "FloorCoveringThickness", "WallCovering", "WallCoveringThickness", "CeilingCovering", "CeilingCoveringThickness", "SkirtingBoard", "SkirtingBoardHeight", "Molding", "MoldingHeight", "ConcealedFlooring", "ConcealedCeiling" }, new[] { "IfcSpace" }));
			ret.Add(new PropertySetInfo("Pset_ActuatorTypeRotationalActuation", new[] { "Torque", "RangeAngle" }, new[] { "IfcActuator" }));
			ret.Add(new PropertySetInfo("Pset_ElectricApplianceTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcElectricAppliance" }));
			ret.Add(new PropertySetInfo("Pset_FanPHistory", new[] { "FanRotationSpeed", "WheelTipSpeed", "FanEfficiency", "OverallEfficiency", "FanPowerRate", "ShaftPowerRate", "DischargeVelocity", "DischargePressureLoss", "DrivePowerLoss" }, new[] { "IfcFan" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeEmergencyStop", new[] { "SwitchOperation" }, new[] { "IfcSwitchingDevice" }));
			ret.Add(new PropertySetInfo("Pset_WorkControlCommon", new[] { "WorkStartTime", "WorkFinishTime", "WorkDayDuration", "WorkWeekDuration", "WorkMonthDuration" }, new[] { "IfcWorkControl" }));
			ret.Add(new PropertySetInfo("Pset_ValvePHistory", new[] { "PercentageOpen", "MeasuredFlowRate", "MeasuredPressureDrop" }, new[] { "IfcValve" }));
			ret.Add(new PropertySetInfo("Pset_ThermalLoadDesignCriteria", new[] { "OccupancyDiversity", "OutsideAirPerPerson", "ReceptacleLoadIntensity", "AppliancePercentLoadToRadiant", "LightingLoadIntensity", "LightingPercentLoadToReturnAir" }, new[] { "IfcSpatialElement" }));
			ret.Add(new PropertySetInfo("Pset_AudioVisualApplianceTypeSpeaker", new[] { "SpeakerType", "SpeakerMounting", "SpeakerDriverSize", "FrequencyResponse", "Impedence" }, new[] { "IfcAudioVisualAppliance" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeMixing", new[] { "MixerControl", "OutletConnectionSize" }, new[] { "IfcValve" }));
			ret.Add(new PropertySetInfo("Pset_CooledBeamTypeCommon", new[] { "Reference", "Status", "IsFreeHanging", "WaterFlowControlSystemType", "WaterPressureRange", "NominalCoolingCapacity", "NominalSurroundingTemperatureCooling", "NominalSurroundingHumidityCooling", "NominalSupplyWaterTemperatureCooling", "NominalReturnWaterTemperatureCooling", "NominalWaterFlowCooling", "NominalHeatingCapacity", "NominalSurroundingTemperatureHeating", "NominalSupplyWaterTemperatureHeating", "NominalReturnWaterTemperatureHeating", "NominalWaterFlowHeating", "IntegratedLightingType", "PipeConnectionEnum", "FinishColor", "CoilLength", "CoilWidth" }, new[] { "IfcCooledBeam" }));
			ret.Add(new PropertySetInfo("Pset_AirSideSystemInformation", new[] { "Name", "Description", "AirSideSystemType", "AirSideSystemDistributionType", "TotalAirflow", "EnergyGainTotal", "AirflowSensible", "EnergyGainSensible", "EnergyLoss", "LightingDiversity", "InfiltrationDiversitySummer", "InfiltrationDiversityWinter", "ApplianceDiversity", "LoadSafetyFactor", "HeatingTemperatureDelta", "CoolingTemperatureDelta", "Ventilation", "FanPower" }, new[] { "IfcSpace", "IfcZone", "IfcSpatialZone" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeKeypad", new[] { "KeypadType" }, new[] { "IfcSwitchingDevice" }));
			ret.Add(new PropertySetInfo("Pset_DamperTypeSmokeDamper", new[] { "ControlType" }, new[] { "IfcDamper" }));
			ret.Add(new PropertySetInfo("Pset_EnvironmentalImpactValues", new[] { "TotalPrimaryEnergyConsumption", "WaterConsumption", "HazardousWaste", "NonHazardousWaste", "ClimateChange", "AtmosphericAcidification", "RenewableEnergyConsumption", "NonRenewableEnergyConsumption", "ResourceDepletion", "InertWaste", "RadioactiveWaste", "StratosphericOzoneLayerDestruction", "PhotochemicalOzoneFormation", "Eutrophication" }, new[] { "IfcElement" }));
			ret.Add(new PropertySetInfo("Pset_RoofCommon", new[] { "Reference", "Status", "AcousticRating", "FireRating", "IsExternal", "ThermalTransmittance" }, new[] { "IfcRoof" }));
			ret.Add(new PropertySetInfo("Pset_FootingCommon", new[] { "Reference", "Status" }, new[] { "IfcFooting" }));
			ret.Add(new PropertySetInfo("Pset_ActuatorTypeLinearActuation", new[] { "Force", "Stroke" }, new[] { "IfcActuator" }));
			ret.Add(new PropertySetInfo("Pset_TankTypeExpansion", new[] { "ChargePressure", "PressureRegulatorSetting", "ReliefValveSetting" }, new[] { "IfcTank" }));
			ret.Add(new PropertySetInfo("Pset_CableSegmentTypeCommon", new[] { "Reference", "Status" }, new[] { "IfcCableSegment" }));
			ret.Add(new PropertySetInfo("Pset_EnvironmentalImpactIndicators", new[] { "Reference", "FunctionalUnitReference", "Unit", "LifeCyclePhase", "ExpectedServiceLife", "TotalPrimaryEnergyConsumptionPerUnit", "WaterConsumptionPerUnit", "HazardousWastePerUnit", "NonHazardousWastePerUnit", "ClimateChangePerUnit", "AtmosphericAcidificationPerUnit", "RenewableEnergyConsumptionPerUnit", "NonRenewableEnergyConsumptionPerUnit", "ResourceDepletionPerUnit", "InertWastePerUnit", "RadioactiveWastePerUnit", "StratosphericOzoneLayerDestructionPerUnit", "PhotochemicalOzoneFormationPerUnit", "EutrophicationPerUnit" }, new[] { "IfcElement" }));
			ret.Add(new PropertySetInfo("Pset_HumidifierPHistory", new[] { "AtmosphericPressure", "SaturationEfficiency" }, new[] { "IfcHumidifier" }));
			ret.Add(new PropertySetInfo("Pset_CoilOccurrence", new[] { "HasSoundAttenuation" }, new[] { "IfcCoil" }));
			ret.Add(new PropertySetInfo("Pset_TransportElementElevator", new[] { "FireFightingLift", "ClearWidth", "ClearDepth", "ClearHeight" }, new[] { "IfcTransportElement" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeSanitaryFountain", new[] { "FountainType", "Mounting", "NominalLength", "NominalWidth", "NominalDepth", "Color", "DrainSize" }, new[] { "IfcSanitaryTerminal" }));
			ret.Add(new PropertySetInfo("Pset_MechanicalFastenerAnchorBolt", new[] { "AnchorBoltLength", "AnchorBoltDiameter", "AnchorBoltThreadLength", "AnchorBoltProtrusionLength" }, new[] { "IfcMechanicalFastener" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeVaristor", new[] { "VaristorType" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_CoilTypeCommon", new[] { "Reference", "Status", "OperationalTemperatureRange", "AirflowRateRange", "NominalSensibleCapacity", "NominalLatentCapacity", "NominalUA", "PlacementType" }, new[] { "IfcCoil" }));
			ret.Add(new PropertySetInfo("Pset_FurnitureTypeChair", new[] { "SeatingHeight", "HighestSeatingHeight", "LowestSeatingHeight" }, new[] { "IfcFurniture" }));
			ret.Add(new PropertySetInfo("Pset_FurnitureTypeTable", new[] { "WorksurfaceArea", "NumberOfChairs" }, new[] { "IfcFurniture" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeManhole", new[] { "InvertLevel", "SoffitLevel", "WallMaterial", "WallThickness", "BaseMaterial", "BaseThickness", "IsShallow", "HasSteps", "WithBackdrop", "AccessCoverMaterial", "AccessLengthOrRadius", "AccessWidth", "AccessCoverLoadRating" }, new[] { "IfcDistributionChamberElement" }));
			ret.Add(new PropertySetInfo("Pset_SpaceOccupancyRequirements", new[] { "OccupancyType", "OccupancyNumber", "OccupancyNumberPeak", "OccupancyTimePerDay", "AreaPerOccupant", "MinimumHeadroom", "IsOutlookDesirable" }, new[] { "IfcSpace", "IfcSpatialZone", "IfcZone" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeFaucet", new[] { "FaucetType", "FaucetOperation", "FaucetFunction", "Finish", "FaucetTopDescription" }, new[] { "IfcValve" }));
			ret.Add(new PropertySetInfo("Pset_FlowMeterTypeGasMeter", new[] { "GasType", "ConnectionSize", "MaximumFlowRate", "MaximumPressureLoss" }, new[] { "IfcFlowMeter" }));
			ret.Add(new PropertySetInfo("Pset_PipeConnectionFlanged", new[] { "FlangeTable", "FlangeStandard", "BoreSize", "FlangeDiameter", "FlangeThickness", "NumberOfBoltholes", "BoltSize", "BoltholePitch" }, new[] { "IfcPipeSegment" }));
			ret.Add(new PropertySetInfo("Pset_CooledBeamPHistory", new[] { "TotalCoolingCapacity", "TotalHeatingCapacity", "BeamCoolingCapacity", "BeamHeatingCapacity", "CoolingWaterFlowRate", "HeatingWaterFlowRate", "CorrectionFactorForCooling", "CorrectionFactorForHeating", "WaterPressureDropCurves", "SupplyWaterTemperatureCooling", "ReturnWaterTemperatureCooling", "SupplyWaterTemperatureHeating", "ReturnWaterTemperatureHeating" }, new[] { "IfcCooledBeam" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeCommon", new[] { "Reference", "Status", "NumberOfGangs", "SwitchFunction", "HasLock", "IsIlluminated", "Legend", "SetPoint" }, new[] { "IfcSwitchingDevice" }));
			ret.Add(new PropertySetInfo("Pset_PackingInstructions", new[] { "PackingCareType", "WrappingMaterial", "ContainerMaterial", "SpecialInstructions" }, new[] { "" }));
			ret.Add(new PropertySetInfo("Pset_WasteTerminalTypeFloorTrap", new[] { "NominalBodyLength", "NominalBodyWidth", "NominalBodyDepth", "IsForSullageWater", "SpilloverLevel", "TrapType", "HasStrainer", "OutletConnectionSize", "InletPatternType", "InletConnectionSize", "CoverLength", "CoverWidth", "CoverMaterial" }, new[] { "IfcWasteTerminal" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeCommon", new[] { "Reference", "ValvePattern", "ValveOperation", "ValveMechanism", "Size", "BodyMaterial", "TestPressure", "WorkingPressure", "FlowCoefficient", "CloseOffRating" }, new[] { "IfcValve" }));
			ret.Add(new PropertySetInfo("Pset_Risk", new[] { "RiskType", "NatureOfRisk", "SubNatureOfRisk1", "SubNatureOfRisk2", "RiskCause", "AssessmentOfRisk", "RiskConsequence", "RiskRating", "RiskOwner", "AffectsSurroundings", "PreventiveMeassures" }, new[] { "IfcProcess" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeDrawOffCock", new[] { "HasHoseUnion" }, new[] { "IfcValve" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceBreakerUnitI2TCurve", new[] { "VoltageLevel", "NominalCurrent", "BreakerUnitCurve" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_RampFlightCommon", new[] { "Reference", "Status", "Headroom", "ClearWidth", "Slope", "CounterSlope" }, new[] { "IfcRampFlight" }));
			ret.Add(new PropertySetInfo("Pset_BuildingUse", new[] { "MarketCategory", "MarketSubCategory", "PlanningControlStatus", "NarrativeText", "VacancyRateInCategoryNow", "TenureModesAvailableNow", "MarketSubCategoriesAvailableNow", "RentalRatesInCategoryNow", "VacancyRateInCategoryFuture", "TenureModesAvailableFuture", "MarketSubCategoriesAvailableFuture", "RentalRatesInCategoryFuture" }, new[] { "IfcBuilding" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypePressureRelief", new[] { "ReliefPressure" }, new[] { "IfcValve" }));
			ret.Add(new PropertySetInfo("Pset_AudioVisualApplianceTypeReceiver", new[] { "ReceiverType", "AudioAmplification", "AudioMode" }, new[] { "IfcAudioVisualAppliance" }));
			ret.Add(new PropertySetInfo("Pset_FanTypeCommon", new[] { "Reference", "Status", "MotorDriveType", "CapacityControlType", "OperationTemperatureRange", "NominalAirFlowRate", "NominalTotalPressure", "NominalStaticPressure", "NominalRotationSpeed", "NominalPowerRate", "OperationalCriteria", "PressureCurve", "EfficiencyCurve" }, new[] { "IfcFan" }));
			ret.Add(new PropertySetInfo("Pset_ProfileArbitraryHollowCore", new[] { "OverallWidth", "OverallDepth", "EdgeDraft", "DraftBaseOffset", "DraftSideOffset", "BaseChamfer", "KeyDepth", "KeyHeight", "KeyOffset", "BottomCover", "CoreSpacing", "CoreBaseHeight", "CoreMiddleHeight", "CoreTopHeight", "CoreBaseWidth", "CoreTopWidth", "CenterCoreSpacing", "CenterCoreBaseHeight", "CenterCoreMiddleHeight", "CenterCoreTopHeight", "CenterCoreBaseWidth", "CenterCoreTopWidth", "NumberOfCores" }, new[] { "IfcArbitraryProfileDefWithVoids" }));
			ret.Add(new PropertySetInfo("Pset_ValveTypeGasTap", new[] { "HasHoseUnion" }, new[] { "IfcValve" }));
			ret.Add(new PropertySetInfo("Pset_FanOccurrence", new[] { "DischargeType", "ApplicationOfFan", "CoilPosition", "MotorPosition", "FanMountingType", "FractionOfMotorHeatToAirStream", "ImpellerDiameter" }, new[] { "IfcFan" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceBreakerUnitTypeMotorProtection", new[] { "PerformanceClasses", "VoltageLevel", "ICU60947", "ICS60947", "ICW60947", "ICM60947" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_Permit", new[] { "EscortRequirement", "StartDate", "EndDate", "SpecialRequirements" }, new[] { "IfcPermit" }));
			ret.Add(new PropertySetInfo("Pset_SpaceHeaterTypeCommon", new[] { "Reference", "Status", "PlacementType", "TemperatureClassification", "HeatTransferDimension", "HeatTransferMedium", "EnergySource", "BodyMass", "ThermalMassHeatCapacity", "OutputCapacity", "ThermalEfficiency", "NumberOfPanels", "NumberOfSections" }, new[] { "IfcSpaceHeater" }));
			ret.Add(new PropertySetInfo("Pset_DoorCommon", new[] { "Reference", "Status", "FireRating", "AcousticRating", "SecurityRating", "DurabilityRating", "HygrothermalRating", "IsExternal", "Infiltration", "ThermalTransmittance", "GlazingAreaFraction", "HandicapAccessible", "FireExit", "HasDrive", "SelfClosing", "SmokeStop" }, new[] { "IfcDoor" }));
			ret.Add(new PropertySetInfo("Pset_ActionRequest", new[] { "RequestSourceLabel", "RequestSourceName", "RequestComments" }, new[] { "IfcActionRequest" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryCornerFixingPlate", new[] { "CornerFixingPlateLength", "CornerFixingPlateThickness", "CornerFixingPlateFlangeWidthInPlaneZ", "CornerFixingPlateFlangeWidthInPlaneX" }, new[] { "IfcDiscreteAccessory" }));
			ret.Add(new PropertySetInfo("Pset_SwitchingDeviceTypeSwitchDisconnector", new[] { "SwitchDisconnectorType", "LoadDisconnectionType" }, new[] { "IfcSwitchingDevice" }));
			ret.Add(new PropertySetInfo("Pset_PipeSegmentTypeGutter", new[] { "Slope", "FlowRating" }, new[] { "IfcPipeSegment" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeBidet", new[] { "Mounting", "NominalLength", "NominalWidth", "NominalDepth", "Color", "SpilloverLevel", "DrainSize" }, new[] { "IfcSanitaryTerminal" }));
			ret.Add(new PropertySetInfo("Pset_PipeFittingPHistory", new[] { "LossCoefficient", "FlowrateLeakage" }, new[] { "IfcPipeFitting" }));
			ret.Add(new PropertySetInfo("Pset_AirTerminalPHistory", new[] { "AirFlowRate", "NeckAirVelocity", "SupplyAirTemperatureHeating", "SupplyAirTemperatureCooling", "PressureDrop", "InductionRatio", "CenterlineAirVelocity" }, new[] { "IfcAirTerminal" }));
			ret.Add(new PropertySetInfo("Pset_CoolingTowerTypeCommon", new[] { "Reference", "Status", "NominalCapacity", "CircuitType", "FlowArrangement", "SprayType", "CapacityControl", "ControlStrategy", "NumberOfCells", "BasinReserveVolume", "LiftElevationDifference", "WaterRequirement", "OperationTemperatureRange", "AmbientDesignDryBulbTemperature", "AmbientDesignWetBulbTemperature" }, new[] { "IfcCoolingTower" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTypeFuseDisconnector", new[] { "FuseDisconnectorType", "VoltageLevel", "IC60269", "PowerLoss" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_CableCarrierSegmentTypeCableTraySegment", new[] { "NominalWidth", "NominalHeight", "HasCover" }, new[] { "IfcCableCarrierSegment" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeWindSensor", new[] { "WindSensorType", "SetPointSpeed" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_PipeFittingTypeCommon", new[] { "Reference", "Status", "PressureClass", "PressureRange", "TemperatureRange", "FittingLossFactor" }, new[] { "IfcPipeFitting" }));
			ret.Add(new PropertySetInfo("Pset_ShadingDeviceCommon", new[] { "Reference", "Status", "ShadingDeviceType", "IsExternal", "MechanicalOperated", "ThermalTransmittance", "SolarTransmittance", "VisibleLightTransmittance", "SolarReflectance", "VisibleLightReflectance", "Roughness", "SurfaceColor" }, new[] { "IfcShadingDevice" }));
			ret.Add(new PropertySetInfo("Pset_CableSegmentTypeBusBarSegment", new[] { "IsHorizontalBusbar" }, new[] { "IfcCableSegment" }));
			ret.Add(new PropertySetInfo("Pset_SensorTypeLevelSensor", new[] { "SetPointLevel" }, new[] { "IfcSensor" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryStandardFixingPlate", new[] { "StandardFixingPlateWidth", "StandardFixingPlateDepth", "StandardFixingPlateThickness" }, new[] { "IfcDiscreteAccessory" }));
			ret.Add(new PropertySetInfo("Pset_EngineTypeCommon", new[] { "Reference", "Status", "EnergySource" }, new[] { "IfcEngine" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceBreakerUnitI2TFuseCurve", new[] { "VoltageLevel", "BreakerUnitFuseMeltingCurve", "BreakerUnitFuseBreakingingCurve" }, new[] { "IfcProtectiveDevice" }));
			ret.Add(new PropertySetInfo("Pset_PipeSegmentTypeCommon", new[] { "Reference", "Status", "WorkingPressure", "PressureRange", "TemperatureRange", "NominalDiameter", "InnerDiameter", "OuterDiameter" }, new[] { "IfcPipeSegment" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeSump", new[] { "Length", "Width", "InvertLevel" }, new[] { "IfcDistributionChamberElement" }));
			ret.Add(new PropertySetInfo("Pset_CableCarrierSegmentTypeCableTrunkingSegment", new[] { "NominalWidth", "NominalHeight", "NumberOfCompartments" }, new[] { "IfcCableCarrierSegment" }));
			ret.Add(new PropertySetInfo("Pset_SpaceLightingRequirements", new[] { "ArtificialLighting", "Illuminance" }, new[] { "IfcSpace", "IfcSpatialZone", "IfcZone" }));
			ret.Add(new PropertySetInfo("Pset_CoilPHistory", new[] { "AtmosphericPressure", "AirPressureDropCurve", "SoundCurve", "FaceVelocity" }, new[] { "IfcCoil" }));
			ret.Add(new PropertySetInfo("Pset_FilterTypeAirParticleFilter", new[] { "AirParticleFilterType", "FrameMaterial", "SeparationType", "DustHoldingCapacity", "FaceSurfaceArea", "MediaExtendedArea", "NominalCountedEfficiency", "NominalWeightedEfficiency", "PressureDropCurve", "CountedEfficiencyCurve", "WeightedEfficiencyCurve" }, new[] { "IfcFilter" }));
			ret.Add(new PropertySetInfo("Pset_AnnotationLineOfSight", new[] { "SetbackDistance", "VisibleAngleLeft", "VisibleAngleRight", "RoadVisibleDistanceLeft", "RoadVisibleDistanceRight" }, new[] { "IfcAnnotation" }));
			ret.Add(new PropertySetInfo("Pset_HumidifierTypeCommon", new[] { "Reference", "Status", "Application", "Weight", "NominalMoistureGain", "NominalAirFlowRate", "InternalControl", "WaterRequirement", "SaturationEfficiencyCurve", "AirPressureDropCurve" }, new[] { "IfcHumidifier" }));
			ret.Add(new PropertySetInfo("Pset_EvaporativeCoolerPHistory", new[] { "WaterSumpTemperature", "Effectiveness", "SensibleHeatTransferRate", "LatentHeatTransferRate", "TotalHeatTransferRate" }, new[] { "IfcEvaporativeCooler" }));
			ret.Add(new PropertySetInfo("Pset_PumpOccurrence", new[] { "ImpellerDiameter", "BaseType", "DriveConnectionType" }, new[] { "IfcPump" }));
			ret.Add(new PropertySetInfo("Pset_ProjectOrderMaintenanceWorkOrder", new[] { "ProductDescription", "WorkTypeRequested", "ContractualType", "IfNotAccomplished", "MaintenaceType", "FaultPriorityType", "LocationPriorityType", "ScheduledFrequency" }, new[] { "IfcProjectOrder" }));
			ret.Add(new PropertySetInfo("Pset_AirTerminalOccurrence", new[] { "AirflowType", "AirFlowRate", "Location" }, new[] { "IfcAirTerminal" }));
			ret.Add(new PropertySetInfo("Pset_ServiceLife", new[] { "ServiceLifeDuration", "MeanTimeBetweenFailure" }, new[] { "IfcElement" }));
			ret.Add(new PropertySetInfo("Pset_DamperTypeFireDamper", new[] { "ActuationType", "ClosureRatingEnum", "FireResistanceRating", "FusibleLinkTemperature" }, new[] { "IfcDamper" }));
			ret.Add(new PropertySetInfo("Pset_CoolingTowerPHistory", new[] { "Capacity", "HeatTransferCoefficient", "SumpHeaterPower", "UACurve", "Performance" }, new[] { "IfcCoolingTower" }));
			ret.Add(new PropertySetInfo("Pset_PileCommon", new[] { "Reference", "Status" }, new[] { "IfcPile" }));
			ret.Add(new PropertySetInfo("Pset_HeatExchangerTypePlate", new[] { "NumberOfPlates" }, new[] { "IfcHeatExchanger" }));
			ret.Add(new PropertySetInfo("Pset_ProtectiveDeviceTrippingUnitTypeElectronic", new[] { "ElectronicTrippingUnitType", "NominalCurrents", "N_Protection", "N_Protection_50", "N_Protection_100", "N_Protection_Select" }, new[] { "IfcProtectiveDeviceTrippingUnit" }));
			ret.Add(new PropertySetInfo("Pset_DistributionPortPHistoryCable", new[] { "Current", "Voltage", "RealPower", "ReactivePower", "ApparentPower", "PowerFactor", "DataTransmitted", "DataReceived" }, new[] { "IfcDistributionPort" }));
			ret.Add(new PropertySetInfo("Pset_OpeningElementCommon", new[] { "Reference", "Status", "Purpose", "FireExit", "ProtectedOpening" }, new[] { "IfcOpeningElement" }));
			ret.Add(new PropertySetInfo("Pset_ManufacturerOccurrence", new[] { "AcquisitionDate", "BarCode", "SerialNumber", "BatchReference", "AssemblyPlace" }, new[] { "IfcElement" }));
			ret.Add(new PropertySetInfo("Pset_FurnitureTypeFileCabinet", new[] { "WithLock" }, new[] { "IfcFurniture" }));
			ret.Add(new PropertySetInfo("Pset_ChimneyCommon", new[] { "Reference", "Status", "NumberOfDrafts", "IsExternal", "ThermalTransmittance", "LoadBearing", "FireRating" }, new[] { "IfcChimney" }));
			ret.Add(new PropertySetInfo("Pset_AirTerminalBoxTypeCommon", new[] { "Reference", "Status", "AirflowRateRange", "AirPressureRange", "NominalAirFlowRate", "ArrangementType", "ReheatType", "HasSoundAttenuator", "HasReturnAir", "HasFan", "NominalInletAirPressure", "NominalDamperDiameter", "HousingThickness", "OperationTemperatureRange", "ReturnAirFractionRange" }, new[] { "IfcAirTerminalBox" }));
			ret.Add(new PropertySetInfo("Pset_ActuatorTypePneumaticActuator", new[] { "InputPressure", "InputFlowrate" }, new[] { "IfcActuator" }));
			ret.Add(new PropertySetInfo("Pset_SanitaryTerminalTypeToiletPan", new[] { "ToiletType", "ToiletPanType", "PanMounting", "Color", "SpilloverLevel", "NominalLength", "NominalWidth", "NominalDepth" }, new[] { "IfcSanitaryTerminal" }));
			ret.Add(new PropertySetInfo("Pset_DiscreteAccessoryLadderTrussConnector", new[] { "LadderTrussHeight", "LadderTrussLength", "LadderTrussCrossBarSpacing", "LadderTrussBaseBarDiameter", "LadderTrussSecondaryBarDiameter", "LadderTrussCrossBarDiameter" }, new[] { "IfcDiscreteAccessory" }));
			ret.Add(new PropertySetInfo("Pset_FurnitureTypeDesk", new[] { "WorksurfaceArea" }, new[] { "IfcFurniture" }));
			ret.Add(new PropertySetInfo("Pset_DistributionSystemCommon", new[] { "Reference" }, new[] { "IfcDistributionSystem" }));
			ret.Add(new PropertySetInfo("Pset_OutsideDesignCriteria", new[] { "HeatingDryBulb", "HeatingWetBulb", "HeatingDesignDay", "CoolingDryBulb", "CoolingWetBulb", "CoolingDesignDay", "WeatherDataStation", "WeatherDataDate", "BuildingThermalExposure", "PrevailingWindDirection", "PrevailingWindVelocity" }, new[] { "IfcBuilding" }));
			ret.Add(new PropertySetInfo("Pset_DistributionChamberElementTypeFormedDuct", new[] { "ClearWidth", "ClearDepth", "WallThickness", "BaseThickness", "AccessCoverLoadRating" }, new[] { "IfcDistributionChamberElement" }));
			return ret;
		}
	}
}
